// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace DataAccessLayer.Models
{
    public partial class PayrolLogOnlyContext : DbContext
    {
        public PayrolLogOnlyContext()
        {
        }

        public PayrolLogOnlyContext(DbContextOptions<PayrolLogOnlyContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Allowance_deduction> Allowance_deductions { get; set; }
        public virtual DbSet<Attendance> Attendances { get; set; }
        public virtual DbSet<Attendance20221231> Attendance20221231s { get; set; }
        public virtual DbSet<AttendanceAutomaticAction> AttendanceAutomaticActions { get; set; }
        public virtual DbSet<AttendanceAutomaticActionType> AttendanceAutomaticActionTypes { get; set; }
        public virtual DbSet<AttendancePath> AttendancePaths { get; set; }
        public virtual DbSet<AttendancePathSetup> AttendancePathSetups { get; set; }
        public virtual DbSet<AttendnaceLog> AttendnaceLogs { get; set; }
        public virtual DbSet<BAK_EMployeesSerElDawaa> BAK_EMployeesSerElDawaas { get; set; }
        public virtual DbSet<Button> Buttons { get; set; }
        public virtual DbSet<CheckInOut> CheckInOuts { get; set; }
        public virtual DbSet<CheckInOutTemp> CheckInOutTemps { get; set; }
        public virtual DbSet<DateTypeDesc> DateTypeDescs { get; set; }
        public virtual DbSet<Day> Days { get; set; }
        public virtual DbSet<EMployeeVacationSchedule> EMployeeVacationSchedules { get; set; }
        public virtual DbSet<EMployeeWeeklyHoliday> EMployeeWeeklyHolidays { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<EmployeeAllowance> EmployeeAllowances { get; set; }
        public virtual DbSet<EmployeeAttendance> EmployeeAttendances { get; set; }
        public virtual DbSet<EmployeeAttendance2> EmployeeAttendance2s { get; set; }
        public virtual DbSet<EmployeeAttendance20220320> EmployeeAttendance20220320s { get; set; }
        public virtual DbSet<EmployeeAttendance20230429> EmployeeAttendance20230429s { get; set; }
        public virtual DbSet<EmployeeAttendanceByHour> EmployeeAttendanceByHours { get; set; }
        public virtual DbSet<EmployeeBalance> EmployeeBalances { get; set; }
        public virtual DbSet<EmployeeContract> EmployeeContracts { get; set; }
        public virtual DbSet<EmployeeContractHistory> EmployeeContractHistories { get; set; }
        public virtual DbSet<EmployeeContractsHistory> EmployeeContractsHistories { get; set; }
        public virtual DbSet<EmployeeDeduction> EmployeeDeductions { get; set; }
        public virtual DbSet<EmployeeEducation> EmployeeEducations { get; set; }
        public virtual DbSet<EmployeeExperience> EmployeeExperiences { get; set; }
        public virtual DbSet<EmployeeGroup> EmployeeGroups { get; set; }
        public virtual DbSet<EmployeeHRService> EmployeeHRServices { get; set; }
        public virtual DbSet<EmployeeHoliday> EmployeeHolidays { get; set; }
        public virtual DbSet<EmployeeInjury> EmployeeInjuries { get; set; }
        public virtual DbSet<EmployeeLanguage> EmployeeLanguages { get; set; }
        public virtual DbSet<EmployeeLeaf> EmployeeLeaves { get; set; }
        public virtual DbSet<EmployeeLeavesLog> EmployeeLeavesLogs { get; set; }
        public virtual DbSet<EmployeeLoan> EmployeeLoans { get; set; }
        public virtual DbSet<EmployeeOverTime> EmployeeOverTimes { get; set; }
        public virtual DbSet<EmployeePaper> EmployeePapers { get; set; }
        public virtual DbSet<EmployeePenalty> EmployeePenalties { get; set; }
        public virtual DbSet<EmployeeSalary> EmployeeSalaries { get; set; }
        public virtual DbSet<EmployeeShift> EmployeeShifts { get; set; }
        public virtual DbSet<EmployeeShiftCheck> EmployeeShiftChecks { get; set; }
        public virtual DbSet<EmployeeShiftDetail> EmployeeShiftDetails { get; set; }
        public virtual DbSet<EmployeeShifts2022> EmployeeShifts2022s { get; set; }
        public virtual DbSet<EmployeeTransaction> EmployeeTransactions { get; set; }
        public virtual DbSet<EmployeeVacation> EmployeeVacations { get; set; }
        public virtual DbSet<EmployeeVacationLog> EmployeeVacationLogs { get; set; }
        public virtual DbSet<Feature> Features { get; set; }
        public virtual DbSet<GeneratedUSerName> GeneratedUSerNames { get; set; }
        public virtual DbSet<Group> Groups { get; set; }
        public virtual DbSet<Holiday> Holidays { get; set; }
        public virtual DbSet<Id> Ids { get; set; }
        public virtual DbSet<LogError> LogErrors { get; set; }
        public virtual DbSet<LookupTable> LookupTables { get; set; }
        public virtual DbSet<Month> Months { get; set; }
        public virtual DbSet<NotifciationSetup> NotifciationSetups { get; set; }
        public virtual DbSet<NotifciationSetupDetail> NotifciationSetupDetails { get; set; }
        public virtual DbSet<NotifciationSetupUserType> NotifciationSetupUserTypes { get; set; }
        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<Online_project> Online_projects { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<ProjectFeature> ProjectFeatures { get; set; }
        public virtual DbSet<ProjectNotification> ProjectNotifications { get; set; }
        public virtual DbSet<Reminder> Reminders { get; set; }
        public virtual DbSet<SalaryExtraMonth> SalaryExtraMonths { get; set; }
        public virtual DbSet<ScheduleTime> ScheduleTimes { get; set; }
        public virtual DbSet<ScheduleTimeDetail> ScheduleTimeDetails { get; set; }
        public virtual DbSet<ScheduleTimeGroup> ScheduleTimeGroups { get; set; }
        public virtual DbSet<Setting> Settings { get; set; }
        public virtual DbSet<SettingDetail> SettingDetails { get; set; }
        public virtual DbSet<Shift> Shifts { get; set; }
        public virtual DbSet<ShiftAllowance> ShiftAllowances { get; set; }
        public virtual DbSet<ShiftDetail> ShiftDetails { get; set; }
        public virtual DbSet<Tax> Taxes { get; set; }
        public virtual DbSet<TestOnlineProject> TestOnlineProjects { get; set; }
        public virtual DbSet<Time> Times { get; set; }
        public virtual DbSet<TimeType> TimeTypes { get; set; }
        public virtual DbSet<TransactionType> TransactionTypes { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserTypeButton> UserTypeButtons { get; set; }
        public virtual DbSet<YearInDay> YearInDays { get; set; }
        public virtual DbSet<aaa> aaas { get; set; }
        public virtual DbSet<employeeleaves20220907> employeeleaves20220907s { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
           
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.UseCollation("Arabic_100_CI_AS");

            modelBuilder.Entity<Allowance_deduction>(entity =>
            {
                entity.HasKey(e => new { e.AllowanceID, e.ProjectID });

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.Allowance_deductions)
                    .HasForeignKey(d => d.ProjectID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Allowance_deduction_Projects");
            });

            modelBuilder.Entity<Attendance>(entity =>
            {
                entity.HasKey(e => new { e.ID, e.ProjectID });

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.Attendances)
                    .HasForeignKey(d => d.EmployeeID)
                    .HasConstraintName("FK_Attendance_Employee");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.Attendances)
                    .HasForeignKey(d => d.ProjectID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Attendance_Projects");
            });

            modelBuilder.Entity<Attendance20221231>(entity =>
            {
                entity.Property(e => e.ID).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<AttendanceAutomaticAction>(entity =>
            {
                entity.HasKey(e => new { e.AttendanceAutomaticActionID, e.ProjectID })
                    .HasName("Pk_AttendanceAutomaticAction");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.AttendanceAutomaticActions)
                    .HasForeignKey(d => d.EmployeeID)
                    .HasConstraintName("fk_AttendanceAutomaticAction_Empl");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.AttendanceAutomaticActions)
                    .HasForeignKey(d => d.ProjectID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_AttendanceAutomaticAction_Proj");
            });

            modelBuilder.Entity<AttendancePath>(entity =>
            {
                entity.HasKey(e => new { e.ID, e.ProjectID });

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.AttendancePaths)
                    .HasForeignKey(d => d.ProjectID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AttendancePath_Projects");
            });

            modelBuilder.Entity<AttendancePathSetup>(entity =>
            {
                entity.HasKey(e => new { e.ID, e.ProjectID })
                    .HasName("PK__Attendan__3214EC27C763F542");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.AttendancePathSetups)
                    .HasForeignKey(d => d.ProjectID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AttendancePathSetup_Projects");
            });

            modelBuilder.Entity<AttendnaceLog>(entity =>
            {
                entity.Property(e => e.ID).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<CheckInOut>(entity =>
            {
                entity.HasKey(e => new { e.ID, e.ProjectID });

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.CheckInOuts)
                    .HasForeignKey(d => d.ProjectID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CheckInOut_Projects");
            });

            modelBuilder.Entity<CheckInOutTemp>(entity =>
            {
                entity.Property(e => e.ID).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<DateTypeDesc>(entity =>
            {
                entity.HasKey(e => new { e.DateTypeID, e.ProjectID });

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.DateTypeDescs)
                    .HasForeignKey(d => d.ProjectID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DateTypeDesc_Projects");
            });

            modelBuilder.Entity<Day>(entity =>
            {
                entity.HasKey(e => new { e.DayID, e.ProjectID });

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.Days)
                    .HasForeignKey(d => d.ProjectID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Days_Projects");
            });

            modelBuilder.Entity<EMployeeVacationSchedule>(entity =>
            {
                entity.HasKey(e => e.EmployeeVacationID)
                    .HasName("PK__EMployee__0252ADE464DB1C74");

                entity.Property(e => e.EmployeeVacationID).ValueGeneratedNever();

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.EMployeeVacationSchedules)
                    .HasForeignKey(d => d.EmployeeID)
                    .HasConstraintName("fk_EMployeeVacationSchedule_Fk2");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.EMployeeVacationSchedules)
                    .HasForeignKey(d => d.ProjectID)
                    .HasConstraintName("fk_EMployeeVacationSchedule_Fk1");
            });

            modelBuilder.Entity<EMployeeWeeklyHoliday>(entity =>
            {
                entity.HasKey(e => new { e.EmployeeID, e.MonthID, e.YearID, e.DayID })
                    .HasName("pk_EMployeeWeeklyHoliday");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.EMployeeWeeklyHolidays)
                    .HasForeignKey(d => d.EmployeeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_EMployeeWeeklyHoliday_Emp");
            });

            modelBuilder.Entity<Employee>(entity =>
            {
                entity.Property(e => e.EmployeeID).ValueGeneratedNever();

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.Employees)
                    .HasForeignKey(d => d.ProjectID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Employees_Projects");
            });

            modelBuilder.Entity<EmployeeAllowance>(entity =>
            {
                entity.HasKey(e => new { e.EmployeeAllowanceID, e.ProjectID });

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.EmployeeAllowances)
                    .HasForeignKey(d => d.EmployeeID)
                    .HasConstraintName("FK_EmployeeAllowances_Employee");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.EmployeeAllowances)
                    .HasForeignKey(d => d.ProjectID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeAllowances_Projects");
            });

            modelBuilder.Entity<EmployeeAttendance>(entity =>
            {
                entity.HasKey(e => new { e.EmployeeID, e.AttendanceDate, e.ProjectID });

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.EmployeeAttendances)
                    .HasForeignKey(d => d.EmployeeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeAttendance_Employee");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.EmployeeAttendances)
                    .HasForeignKey(d => d.ProjectID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeAttendance_Projects");
            });

            modelBuilder.Entity<EmployeeAttendance2>(entity =>
            {
                entity.Property(e => e.ID).ValueGeneratedNever();

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.EmployeeAttendance2s)
                    .HasForeignKey(d => d.EmployeeID)
                    .HasConstraintName("fk_EmployeeAttendance2_Emp");
            });

            modelBuilder.Entity<EmployeeAttendanceByHour>(entity =>
            {
                entity.HasKey(e => new { e.EmployeeID, e.AttendanceDate });
            });

            modelBuilder.Entity<EmployeeBalance>(entity =>
            {
                entity.HasKey(e => new { e.EmployeeID, e.YearID })
                    .HasName("PK_EmployeeBalance_1");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.EmployeeBalances)
                    .HasForeignKey(d => d.EmployeeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeBalance_Employee");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.EmployeeBalances)
                    .HasForeignKey(d => d.ProjectID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeBalance_Projects");
            });

            modelBuilder.Entity<EmployeeContract>(entity =>
            {
                entity.HasKey(e => e.ContractID)
                    .HasName("PK_EmployeeContracts_1");

                entity.Property(e => e.ContractID).ValueGeneratedNever();

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.EmployeeContracts)
                    .HasForeignKey(d => d.EmployeeID)
                    .HasConstraintName("FK_EmployeeContracts_Employee");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.EmployeeContracts)
                    .HasForeignKey(d => d.ProjectID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeContracts_Projects");
            });

            modelBuilder.Entity<EmployeeContractsHistory>(entity =>
            {
                entity.Property(e => e.LogID).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<EmployeeDeduction>(entity =>
            {
                entity.HasKey(e => new { e.EmployeeDeductionID, e.ProjectID });

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.EmployeeDeductions)
                    .HasForeignKey(d => d.EmployeeID)
                    .HasConstraintName("FK_EmployeeDeductions_Employee");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.EmployeeDeductions)
                    .HasForeignKey(d => d.ProjectID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeDeductions_Projects");
            });

            modelBuilder.Entity<EmployeeEducation>(entity =>
            {
                entity.HasKey(e => new { e.EmployeeID, e.DetailID, e.ProjectID });

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.EmployeeEducations)
                    .HasForeignKey(d => d.EmployeeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeEducation_Employee");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.EmployeeEducations)
                    .HasForeignKey(d => d.ProjectID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeEducation_Projects");
            });

            modelBuilder.Entity<EmployeeExperience>(entity =>
            {
                entity.HasKey(e => new { e.EmployeeID, e.DetailID, e.ProjectID });

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.EmployeeExperiences)
                    .HasForeignKey(d => d.EmployeeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeExperience_Employee");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.EmployeeExperiences)
                    .HasForeignKey(d => d.ProjectID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeExperience_Projects");
            });

            modelBuilder.Entity<EmployeeGroup>(entity =>
            {
                entity.HasKey(e => new { e.EmployeeGroupID, e.EmployeeID, e.ProjectID });

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.EmployeeGroups)
                    .HasForeignKey(d => d.EmployeeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeGroups_Employee");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.EmployeeGroups)
                    .HasForeignKey(d => d.ProjectID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeGroups_Projects");
            });

            modelBuilder.Entity<EmployeeHRService>(entity =>
            {
                entity.HasKey(e => new { e.EmployeeHRServiceID, e.EmployeeID })
                    .HasName("pk_EmployeeHRService");
            });

            modelBuilder.Entity<EmployeeHoliday>(entity =>
            {
                entity.HasKey(e => new { e.EmployeeID, e.MonthID, e.YearID })
                    .HasName("pk_EmployeeHoliday");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.EmployeeHolidays)
                    .HasForeignKey(d => d.EmployeeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_EmployeeHoliday");
            });

            modelBuilder.Entity<EmployeeInjury>(entity =>
            {
                entity.HasKey(e => new { e.EmployeeInjuryID, e.EmployeeID })
                    .HasName("pk_EmployeeInjury");
            });

            modelBuilder.Entity<EmployeeLanguage>(entity =>
            {
                entity.HasKey(e => new { e.EmployeeID, e.LanguageID, e.ProjectID });

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.EmployeeLanguages)
                    .HasForeignKey(d => d.EmployeeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeLanguage_Employee");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.EmployeeLanguages)
                    .HasForeignKey(d => d.ProjectID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeLanguage_Projects");
            });

            modelBuilder.Entity<EmployeeLeaf>(entity =>
            {
                entity.HasKey(e => new { e.EmployeeLeaveID, e.EmployeeID, e.ProjectID });

                entity.Property(e => e.EmployeeLeaveID).ValueGeneratedOnAdd();

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.EmployeeLeaves)
                    .HasForeignKey(d => d.EmployeeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeLeaves_Employee");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.EmployeeLeaves)
                    .HasForeignKey(d => d.ProjectID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeLeaves_Projects");
            });

            modelBuilder.Entity<EmployeeLeavesLog>(entity =>
            {
                entity.HasKey(e => e.EmployeeLeaveID)
                    .HasName("pk_EmployeeLeavesLog");

                entity.Property(e => e.EmployeeLeaveID).ValueGeneratedNever();

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.EmployeeLeavesLogs)
                    .HasForeignKey(d => d.EmployeeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_EmployeeLeavesLog");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.EmployeeLeavesLogs)
                    .HasForeignKey(d => d.ProjectID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_EmployeeLeavesLog1");
            });

            modelBuilder.Entity<EmployeeLoan>(entity =>
            {
                entity.HasKey(e => new { e.EmployeeLoanID, e.EmployeeID, e.ProjectID });

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.EmployeeLoans)
                    .HasForeignKey(d => d.EmployeeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeLoan_Employee");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.EmployeeLoans)
                    .HasForeignKey(d => d.ProjectID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeLoan_Projects");
            });

            modelBuilder.Entity<EmployeeOverTime>(entity =>
            {
                entity.HasKey(e => new { e.EmployeeID, e.AttendanceDate })
                    .HasName("pk_EmployeeOverTime");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.EmployeeOverTimes)
                    .HasForeignKey(d => d.EmployeeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_EmployeeOverTime_Employees");
            });

            modelBuilder.Entity<EmployeePaper>(entity =>
            {
                entity.HasKey(e => new { e.EmployeeID, e.DetailID })
                    .HasName("pk_EmployeePaper");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.EmployeePapers)
                    .HasForeignKey(d => d.EmployeeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeePaper1");
            });

            modelBuilder.Entity<EmployeePenalty>(entity =>
            {
                entity.HasKey(e => new { e.EmployeePenaltyID, e.EmployeeID })
                    .HasName("pk_EmployeePenalty");
            });

            modelBuilder.Entity<EmployeeSalary>(entity =>
            {
                entity.HasOne(d => d.Employee)
                    .WithMany()
                    .HasForeignKey(d => d.EmployeeID)
                    .HasConstraintName("FK_EmployeeSalary_Employee");

                entity.HasOne(d => d.Project)
                    .WithMany()
                    .HasForeignKey(d => d.ProjectID)
                    .HasConstraintName("FK_EmployeeSalary_Projects");
            });

            modelBuilder.Entity<EmployeeShift>(entity =>
            {
                entity.HasKey(e => new { e.EmployeeShiftID, e.EmployeeID, e.ProjectID });

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.EmployeeShifts)
                    .HasForeignKey(d => d.EmployeeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeShifts_Employee");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.EmployeeShifts)
                    .HasForeignKey(d => d.ProjectID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeShifts_Projects");
            });

            modelBuilder.Entity<EmployeeShiftCheck>(entity =>
            {
                entity.HasKey(e => new { e.EmployeeID, e.ShiftID })
                    .HasName("pk_EmployeeShiftCheck");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.EmployeeShiftChecks)
                    .HasForeignKey(d => d.EmployeeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_EmployeeShiftCheck_Emplo");
            });

            modelBuilder.Entity<EmployeeShiftDetail>(entity =>
            {
                entity.HasKey(e => new { e.EmployeeID, e.ShiftID, e.DayID, e.ShiftDate });

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.EmployeeShiftDetails)
                    .HasForeignKey(d => d.EmployeeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeShiftDetails_Employees");

                entity.HasOne(d => d.Shift)
                    .WithMany(p => p.EmployeeShiftDetails)
                    .HasForeignKey(d => d.ShiftID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeShiftDetails_Shifts");
            });

            modelBuilder.Entity<EmployeeTransaction>(entity =>
            {
                entity.HasKey(e => new { e.EmployeeTransactionID, e.EmployeeID, e.ProjectID });

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.EmployeeTransactions)
                    .HasForeignKey(d => d.EmployeeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeTransaction_Employee");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.EmployeeTransactions)
                    .HasForeignKey(d => d.ProjectID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeTransaction_Projects");
            });

            modelBuilder.Entity<EmployeeVacation>(entity =>
            {
                entity.HasKey(e => new { e.EmployeeVacationID, e.EmployeeID, e.ProjectID });

                entity.Property(e => e.EmployeeVacationID).ValueGeneratedOnAdd();

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.EmployeeVacations)
                    .HasForeignKey(d => d.EmployeeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeVacation_Employee");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.EmployeeVacations)
                    .HasForeignKey(d => d.ProjectID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeVacation_Projects");
            });

            modelBuilder.Entity<EmployeeVacationLog>(entity =>
            {
                entity.HasKey(e => e.EmployeeVacationID)
                    .HasName("pk_EmployeeVacationLog");

                entity.Property(e => e.EmployeeVacationID).ValueGeneratedNever();

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.EmployeeVacationLogs)
                    .HasForeignKey(d => d.EmployeeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_EmployeeVacationLog");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.EmployeeVacationLogs)
                    .HasForeignKey(d => d.ProjectID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_EmployeeVacationLog1");
            });

            modelBuilder.Entity<Feature>(entity =>
            {
                entity.Property(e => e.FeatureID).ValueGeneratedNever();
            });

            modelBuilder.Entity<Group>(entity =>
            {
                entity.HasKey(e => new { e.GroupID, e.ProjectID });

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.Groups)
                    .HasForeignKey(d => d.ProjectID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Groups_Projects");
            });

            modelBuilder.Entity<Holiday>(entity =>
            {
                entity.HasKey(e => new { e.HolidayID, e.ProjectID });

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.Holidays)
                    .HasForeignKey(d => d.ProjectID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Holiday_Projects");
            });

            modelBuilder.Entity<Id>(entity =>
            {
                entity.HasKey(e => new { e.ID1, e.ProjectID });

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.Ids)
                    .HasForeignKey(d => d.ProjectID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Ids_Projects");
            });

            modelBuilder.Entity<LookupTable>(entity =>
            {
                entity.HasKey(e => new { e.ID, e.ProjectID });

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.LookupTables)
                    .HasForeignKey(d => d.ProjectID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LookupTable_Projects");
            });

            modelBuilder.Entity<Month>(entity =>
            {
                entity.HasKey(e => new { e.ID, e.ProjectID });

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.Months)
                    .HasForeignKey(d => d.ProjectID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Months_Projects");
            });

            modelBuilder.Entity<NotifciationSetupDetail>(entity =>
            {
                entity.HasKey(e => new { e.NotifciationSetupID, e.LevelID })
                    .HasName("pk_NotifciationSetupDetail");
            });

            modelBuilder.Entity<NotifciationSetupUserType>(entity =>
            {
                entity.HasKey(e => new { e.NotifciationSetupID, e.LevelID, e.UserTypeID })
                    .HasName("pk_NotifciationSetupUsers");
            });

            modelBuilder.Entity<Notification>(entity =>
            {
                entity.Property(e => e.NotificationID).ValueGeneratedNever();
            });

            modelBuilder.Entity<Online_project>(entity =>
            {
                entity.Property(e => e.ProjectId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Project>(entity =>
            {
                entity.Property(e => e.ProjectID).ValueGeneratedNever();
            });

            modelBuilder.Entity<ProjectFeature>(entity =>
            {
                entity.HasKey(e => new { e.ProjectID, e.FeatureID });

                entity.Property(e => e.ID).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<ProjectNotification>(entity =>
            {
                entity.HasKey(e => new { e.ProjectID, e.NotificationID })
                    .HasName("pk_ProjectNotifications");
            });

            modelBuilder.Entity<SalaryExtraMonth>(entity =>
            {
                entity.HasKey(e => new { e.MonthID, e.ProjectID })
                    .HasName("pk_SalaryExtraMonth");
            });

            modelBuilder.Entity<ScheduleTime>(entity =>
            {
                entity.Property(e => e.ScheduleTimeID).ValueGeneratedNever();
            });

            modelBuilder.Entity<ScheduleTimeDetail>(entity =>
            {
                entity.HasKey(e => new { e.ScheduleTimeID, e.DayID, e.DetailID });

                entity.HasOne(d => d.ScheduleTime)
                    .WithMany(p => p.ScheduleTimeDetails)
                    .HasForeignKey(d => d.ScheduleTimeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ScheduleTimeDetail");
            });

            modelBuilder.Entity<ScheduleTimeGroup>(entity =>
            {
                entity.HasKey(e => new { e.ScheduleTimeID, e.GroupID, e.ProjectID })
                    .HasName("pk_TimeScheduleGroup");
            });

            modelBuilder.Entity<Setting>(entity =>
            {
                entity.HasKey(e => new { e.SettingID, e.ProjectID });

                entity.Property(e => e.ZKFlag).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.Settings)
                    .HasForeignKey(d => d.ProjectID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Settings_Projects");
            });

            modelBuilder.Entity<SettingDetail>(entity =>
            {
                entity.HasKey(e => new { e.SettingID, e.DayID, e.ProjectID });

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.SettingDetails)
                    .HasForeignKey(d => d.ProjectID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SettingDetails_Projects");
            });

            modelBuilder.Entity<Shift>(entity =>
            {
                entity.Property(e => e.ShiftID).ValueGeneratedNever();

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.Shifts)
                    .HasForeignKey(d => d.ProjectID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Shifts_Projects");
            });

            modelBuilder.Entity<ShiftAllowance>(entity =>
            {
                entity.HasKey(e => e.AllowanceShiftID)
                    .HasName("pk_ShiftAllowance");

                entity.Property(e => e.AllowanceShiftID).ValueGeneratedNever();

                entity.HasOne(d => d.Allowance_deduction)
                    .WithMany(p => p.ShiftAllowances)
                    .HasForeignKey(d => new { d.AllowanceID, d.ProjectID })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_ShiftAllowance");
            });

            modelBuilder.Entity<ShiftDetail>(entity =>
            {
                entity.HasKey(e => new { e.ShiftID, e.DayID, e.ProjectID });

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ShiftDetails)
                    .HasForeignKey(d => d.ProjectID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ShiftDetails_Projects");
            });

            modelBuilder.Entity<Tax>(entity =>
            {
                entity.Property(e => e.TaxID).ValueGeneratedNever();
            });

            modelBuilder.Entity<TestOnlineProject>(entity =>
            {
                entity.Property(e => e.ProjectId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Time>(entity =>
            {
                entity.HasKey(e => new { e.TimeID, e.ProjectID });

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.Times)
                    .HasForeignKey(d => d.ProjectID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Time_Projects");
            });

            modelBuilder.Entity<TimeType>(entity =>
            {
                entity.HasKey(e => new { e.TimeTypeID, e.ProjectID });

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.TimeTypes)
                    .HasForeignKey(d => d.ProjectID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TimeTypes_Projects");
            });

            modelBuilder.Entity<TransactionType>(entity =>
            {
                entity.HasKey(e => new { e.TransactionTypeID, e.ProjectID });

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.TransactionTypes)
                    .HasForeignKey(d => d.ProjectID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransactionTypes_Projects");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.HasKey(e => new { e.UserID, e.ProjectID });

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.Users)
                    .HasForeignKey(d => d.ProjectID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Users_Projects");
            });

            OnModelCreatingGeneratedProcedures(modelBuilder);
            OnModelCreatingGeneratedFunctions(modelBuilder);
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}