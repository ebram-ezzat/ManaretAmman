// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.EntityFrameworkCore;
using System;
using System.Data;
using System.Linq;
using DataAccessLayer.Models;

namespace DataAccessLayer.Models
{
    public partial class PayrolLogOnlyContext
    {

        [DbFunction("cieltoHour", "dbo")]
        public static int? cieltoHour(int? pInt, int? cielOvertimeifexceed, int? OvertimeHourWillStartAfter)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("ConvertDateTimeToInt", "dbo")]
        public static int? ConvertDateTimeToInt(DateTime? pInt)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("ConvertIntToDateTime", "dbo")]
        public static string ConvertIntToDateTime(int? pInt, int? pProjectID)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("ConvertIntToTime", "dbo")]
        public static string ConvertIntToTime(int? pInt)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("ConvertIntToTimeTotals", "dbo")]
        public static string ConvertIntToTimeTotals(int? pInt)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("ConvertValuesToDecimal", "dbo")]
        public static decimal? ConvertValuesToDecimal(decimal? pValueBeforeConvert)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("GaetCurrentBalance", "dbo")]
        public static int? GaetCurrentBalance(int? pStartDate, int? pEndDate, int? pBalance, int? pProjectID)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("GetApprovalStatus", "dbo")]
        public static string GetApprovalStatus(int? pLanguageID, int? pStatusID, int? pApprovalStatusID, int? pProjectID)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("GetAutomaticLeaveDuringDay", "dbo")]
        public static string GetAutomaticLeaveDuringDay(int? pEmployeeID, int? pProjectID, int? pDate, int? Type, int? pFromTime, int? pToTime, int? pCheckIN, int? pCheckout, int? pallowedlate, int? pIsWorkingDay, int? pFromTime1, int? pFixedDayID, int? pAllowedLateInLeave, int? pLasttime, int? pLanguageID, int? ShiftID, int? WeekDayID)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("GetAutomaticLeaveDuringDayTable", "dbo")]
        public IQueryable<GetAutomaticLeaveDuringDayTableResult> GetAutomaticLeaveDuringDayTable(int? pEmployeeID, int? pProjectID, int? pDate, int? Type, int? pFromTime, int? pToTime, int? pCheckIN, int? pCheckout, int? pallowedlate, int? pIsWorkingDay, int? pFromTime1, int? pFixedDayID, int? pAllowedLateInLeave, int? pLasttime, int? pLanguageID)
        {
            return FromExpression(() => GetAutomaticLeaveDuringDayTable(pEmployeeID, pProjectID, pDate, Type, pFromTime, pToTime, pCheckIN, pCheckout, pallowedlate, pIsWorkingDay, pFromTime1, pFixedDayID, pAllowedLateInLeave, pLasttime, pLanguageID));
        }

        [DbFunction("GetAutomaticMultiCheckInTable", "dbo")]
        public IQueryable<GetAutomaticMultiCheckInTableResult> GetAutomaticMultiCheckInTable(int? pEmployeeID, int? pProjectID, int? pFromDate, int? pToDate)
        {
            return FromExpression(() => GetAutomaticMultiCheckInTable(pEmployeeID, pProjectID, pFromDate, pToDate));
        }

        [DbFunction("GetCurrentBalance", "dbo")]
        public static int? GetCurrentBalance(int? pStartDate, int? pEndDate, int? pBalance, int? pProjectID, int? pYearID)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("GetDateAsString", "dbo")]
        public static string GetDateAsString(int? pInt, int? pProjectID)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("GetDatetime", "dbo")]
        public static DateTime? GetDatetime(int? pInt)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("GetEmployeeAttendanceFN", "dbo")]
        public IQueryable<GetEmployeeAttendanceFNResult> GetEmployeeAttendanceFN(int? pProjectID, int? pEmployeeID, int? StartDate, int? EndDate, int? pVacationTypeID, int? pIsAllowFlag, int? pLanguageID, int? pWithAuto)
        {
            return FromExpression(() => GetEmployeeAttendanceFN(pProjectID, pEmployeeID, StartDate, EndDate, pVacationTypeID, pIsAllowFlag, pLanguageID, pWithAuto));
        }

        [DbFunction("GetEmployeeAttendanceTotals", "dbo")]
        public IQueryable<GetEmployeeAttendanceTotalsResult> GetEmployeeAttendanceTotals(int? pProjectID, int? pEmployeeID, int? StartDate, int? EndDate, int? pVacationTypeID, int? pIsAllowFlag, int? pYearID)
        {
            return FromExpression(() => GetEmployeeAttendanceTotals(pProjectID, pEmployeeID, StartDate, EndDate, pVacationTypeID, pIsAllowFlag, pYearID));
        }

        [DbFunction("GetLeaveCount", "dbo")]
        public IQueryable<GetLeaveCountResult> GetLeaveCount(int? pProjectID, int? pEmployeeID, int? pVacationTypeID, int? pTypeID, int? pYearID)
        {
            return FromExpression(() => GetLeaveCount(pProjectID, pEmployeeID, pVacationTypeID, pTypeID, pYearID));
        }

        [DbFunction("GetLeaveCountDetail", "dbo")]
        public IQueryable<GetLeaveCountDetailResult> GetLeaveCountDetail(int? pProjectID, int? pEmployeeID, int? pVacationTypeID, int? pTypeID, int? pYearID)
        {
            return FromExpression(() => GetLeaveCountDetail(pProjectID, pEmployeeID, pVacationTypeID, pTypeID, pYearID));
        }

        [DbFunction("GetNextDayInt", "dbo")]
        public static int? GetNextDayInt(int? pInt)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("GetPreviousDayInt", "dbo")]
        public static int? GetPreviousDayInt(int? pInt)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("GetWorkingDays", "dbo")]
        public static int? GetWorkingDays(int? pFromDate, int? pToDate, int? pEmployeeID, int? pVacationTypeID)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("RemoveExtraSpaces", "dbo")]
        public static string RemoveExtraSpaces(string pString)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("ResolveStringWithRowNum", "dbo")]
        public IQueryable<ResolveStringWithRowNumResult> ResolveStringWithRowNum(string pStr)
        {
            return FromExpression(() => ResolveStringWithRowNum(pStr));
        }

        protected void OnModelCreatingGeneratedFunctions(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<GetAutomaticLeaveDuringDayTableResult>().HasNoKey();
            modelBuilder.Entity<GetAutomaticMultiCheckInTableResult>().HasNoKey();
            modelBuilder.Entity<GetEmployeeAttendanceFNResult>().HasNoKey();
            modelBuilder.Entity<GetEmployeeAttendanceTotalsResult>().HasNoKey();
            modelBuilder.Entity<GetLeaveCountResult>().HasNoKey();
            modelBuilder.Entity<GetLeaveCountDetailResult>().HasNoKey();
            modelBuilder.Entity<ResolveStringWithRowNumResult>().HasNoKey();
        }
    }
}
