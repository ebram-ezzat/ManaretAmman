// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using DataAccessLayer.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace DataAccessLayer.Models
{
    public partial class PayrolLogOnlyContext
    {
        private IPayrolLogOnlyContextProcedures _procedures;

        public virtual IPayrolLogOnlyContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new PayrolLogOnlyContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IPayrolLogOnlyContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ArrangeEMployeeWeeklyHolidayResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AutomaticLeaveResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<CalculateEmployeeSalaryResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ChangeEmployeeRequestStatusResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<DeleteEmployeesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAllowance_deductionResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAttendanceResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAttendanceAutomaticActionTypeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAttendancePathResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAttendancePathSetupResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAutomaticAttendanceActioonsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEmployeeAllowancesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEmployeeApprovalsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEmployeeAttendanceResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEmployeeAttendanceByHoursResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEmployeeAttendanceDailyResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEmployeeAttendanceDailyAbsentResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEmployeeAttendanceDailyAdditionalResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEmployeeAttendanceDailyBreakResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEmployeeAttendanceDailyLateResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEmployeeAttendanceDailyMissingCheckOutResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEmployeeBalanceResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEmployeeBalanceReportResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEmployeeContractsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEmployeeDeductionsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEmployeeEndContractReportResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEmployeeGroupsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEmployeeHolidayResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEmployeeHRServiceResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEmployeeHRServiceReportResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEmployeeInjuryResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEmployeeInjuryReportResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEmployeeLeaveReportResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEmployeeLeavesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEmployeeLoanResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEmployeeLoanReportResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEmployeeLoanReportTotalsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEmployeeNotificationsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEmployeeOvertimeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEmployeePaperResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEmployeePenaltyResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEmployeePenaltyReportResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEmployeeReportResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEmployeesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEmployeeSalaryResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEmployeeSalaryReportResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEmployeeSalaryReport2Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEmployeeShiftCheckResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEmployeeShiftsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEmployeeTransactionResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEmployeeVacationResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEmployeeVacationReportResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEmployeeVacationScheduleResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEMployeeWeeklyHolidayResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetGroupsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetHolidayResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetIdsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetLookupTableResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetProjectFeaturesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetProjectsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetRemindersResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetScheduleTimeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetScheduleTimeDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetScheduleTimeGroupResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetSettingDetailsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetSettingsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetShiftAllowanceResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetShiftDetailsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetShiftsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetUsersResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<InsertAttendanceResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<InsertAutomaticAttendanceActionsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<InsertEmployeeHolidayResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<InsertEMployeeWeeklyHolidayResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<InsertLookupTableResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<InsertSettingDetailsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<InsertSettingsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<InsertShiftAllowanceResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Online_GetprojectsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Online_SaveprojectsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<RefreshEmployeeAttendanceResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<RefreshEmployeeAttendanceTest20221107Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<SaveAllowance_DeductionResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SaveEmployeeAllowancesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SaveEmployeeFromDeviceResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SaveEmployeeGeneralInfoResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SaveEmployeeLeavesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SaveEmployeeLoanResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SaveEmployeeShiftsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SaveEmployeeTransactionResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SaveEmployeeTransactionAutoResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SaveEmployeeVacationResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SaveEmployeeVacationScheduleResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SaveIDsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<TarheelEmployeeBalanceResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<UpdateEmployeeAttendanceResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<UpdateEmployeeAttendance2Result>().HasNoKey().ToView(null);
        }
    }

    public partial class PayrolLogOnlyContextProcedures : IPayrolLogOnlyContextProcedures
    {
        private readonly PayrolLogOnlyContext _context;

        public PayrolLogOnlyContextProcedures(PayrolLogOnlyContext context)
        {
            _context = context;
        }

        public virtual async Task<List<ArrangeEMployeeWeeklyHolidayResult>> ArrangeEMployeeWeeklyHolidayAsync(int? pFromDate, int? pToDate, int? pCreatedBy, int? pProjectID, int? pMonthID, int? pYearID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pFromDate",
                    Value = pFromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pToDate",
                    Value = pToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pMonthID",
                    Value = pMonthID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pYearID",
                    Value = pYearID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ArrangeEMployeeWeeklyHolidayResult>("EXEC @returnValue = [dbo].[ArrangeEMployeeWeeklyHoliday] @pFromDate, @pToDate, @pCreatedBy, @pProjectID, @pMonthID, @pYearID, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> AutomaticBreakAsync(int? pProjectID, int? MaxDate, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MaxDate",
                    Value = MaxDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[AutomaticBreak] @pProjectID, @MaxDate, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AutomaticLeaveResult>> AutomaticLeaveAsync(int? pEmployeeID, int? pProjectID, int? pDate, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pDate",
                    Value = pDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AutomaticLeaveResult>("EXEC @returnValue = [dbo].[AutomaticLeave] @pEmployeeID, @pProjectID, @pDate, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CalculateEmployeeSalaryResult>> CalculateEmployeeSalaryAsync(int? pProjectID, int? pEmployeeID, int? pCurrentMonthID, int? pCurrentYearID, int? pFromDate, int? pToDate, int? pCreatedBy, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCurrentMonthID",
                    Value = pCurrentMonthID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCurrentYearID",
                    Value = pCurrentYearID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFromDate",
                    Value = pFromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pToDate",
                    Value = pToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CalculateEmployeeSalaryResult>("EXEC @returnValue = [dbo].[CalculateEmployeeSalary] @pProjectID, @pEmployeeID, @pCurrentMonthID, @pCurrentYearID, @pFromDate, @pToDate, @pCreatedBy, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ChangeEmployeeRequestStatusResult>> ChangeEmployeeRequestStatusAsync(int? pEmployeeID, int? pCreatedBy, int? pApprovalStatusID, int? pApprovalPageID, int? pProjectID, int? pID, int? pPrevilageType, int? pSendToLog, int? pPK, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pApprovalStatusID",
                    Value = pApprovalStatusID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pApprovalPageID",
                    Value = pApprovalPageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pID",
                    Value = pID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pPrevilageType",
                    Value = pPrevilageType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                new SqlParameter
                {
                    ParameterName = "pSendToLog",
                    Value = pSendToLog ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pPK",
                    Value = pPK ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ChangeEmployeeRequestStatusResult>("EXEC @returnValue = [dbo].[ChangeEmployeeRequestStatus] @pEmployeeID, @pCreatedBy, @pApprovalStatusID, @pApprovalPageID, @pProjectID, @pID, @pPrevilageType, @pError OUTPUT, @pSendToLog, @pPK", sqlParameters, cancellationToken);

            pError?.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> CreateClassTemplateAsync(string pTableName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pTableName",
                    Size = 250,
                    Value = pTableName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[CreateClassTemplate] @pTableName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> CreateNewProjectAsync(string pUserName, int? pOnlineProjectID, string pPassword, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pUserName",
                    Size = 50,
                    Value = pUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pOnlineProjectID",
                    Value = pOnlineProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pPassword",
                    Size = 100,
                    Value = pPassword ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[CreateNewProject] @pUserName, @pOnlineProjectID, @pPassword", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DeleteAllowance_deductionAsync(int? pAllowanceID, int? pProjectID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pAllowanceID",
                    Value = pAllowanceID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DeleteAllowance_deduction] @pAllowanceID, @pProjectID, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DeleteAttendanceAsync(int? pID, int? pProjectID, int? pEmployeeID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pID",
                    Value = pID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DeleteAttendance] @pID, @pProjectID, @pEmployeeID, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DeleteAttendancePathAsync(string pPath, int? pProjectID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pPath",
                    Size = 1000,
                    Value = pPath ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DeleteAttendancePath] @pPath, @pProjectID, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DeleteAttendancePathSetupAsync(string pIP, int? pProjectID, string pPort, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pIP",
                    Size = 1000,
                    Value = pIP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pPort",
                    Size = 100,
                    Value = pPort ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DeleteAttendancePathSetup] @pIP, @pProjectID, @pPort, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DeleteEmployeeAllowancesAsync(int? pEmployeeID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DeleteEmployeeAllowances] @pEmployeeID, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DeleteEmployeeDeductionsAsync(int? pEmployeeID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DeleteEmployeeDeductions] @pEmployeeID, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DeleteEmployeeGroupsAsync(int? pEmployeeGroupID, int? pProjectID, int? pGroupID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeGroupID",
                    Value = pEmployeeGroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                new SqlParameter
                {
                    ParameterName = "pGroupID",
                    Value = pGroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DeleteEmployeeGroups] @pEmployeeGroupID, @pProjectID, @pError OUTPUT, @pGroupID", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DeleteEmployeeLeavesAsync(int? pEmployeeLeaveID, int? pProjectID, int? pCreatedBy, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeLeaveID",
                    Value = pEmployeeLeaveID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DeleteEmployeeLeaves] @pEmployeeLeaveID, @pProjectID, @pError OUTPUT, @pCreatedBy", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DeleteEmployeeLoanAsync(int? pEmployeeLoanID, int? pProjectID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeLoanID",
                    Value = pEmployeeLoanID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DeleteEmployeeLoan] @pEmployeeLoanID, @pProjectID, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DeleteEmployeeOvertimeAsync(int? pEmployeeID, int? pAttendanceDate, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pAttendanceDate",
                    Value = pAttendanceDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DeleteEmployeeOvertime] @pEmployeeID, @pAttendanceDate, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DeleteEmployeePaperAsync(int? pEmployeeID, int? pDetailID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pDetailID",
                    Value = pDetailID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DeleteEmployeePaper] @pEmployeeID, @pDetailID, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DeleteEmployeesResult>> DeleteEmployeesAsync(int? pEmployeeID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DeleteEmployeesResult>("EXEC @returnValue = [dbo].[DeleteEmployees] @pEmployeeID, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DeleteEmployeeSalaryAsync(int? pEmployeeID, int? pProjectID, int? pCurrentMonthID, int? pCurrentYearID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCurrentMonthID",
                    Value = pCurrentMonthID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCurrentYearID",
                    Value = pCurrentYearID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DeleteEmployeeSalary] @pEmployeeID, @pProjectID, @pCurrentMonthID, @pCurrentYearID, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DeleteEmployeeShiftByDaysAsync(int? pEmployeeID, int? pFromDate, int? pCreatedBy, int? pProjectID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFromDate",
                    Value = pFromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DeleteEmployeeShiftByDays] @pEmployeeID, @pFromDate, @pCreatedBy, @pProjectID, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DeleteEmployeeShiftsAsync(int? pEmployeeShiftID, int? pProjectID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeShiftID",
                    Value = pEmployeeShiftID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DeleteEmployeeShifts] @pEmployeeShiftID, @pProjectID, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DeleteEmployeeTransactionAsync(int? pEmployeeTransactionID, int? pProjectID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeTransactionID",
                    Value = pEmployeeTransactionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DeleteEmployeeTransaction] @pEmployeeTransactionID, @pProjectID, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DeleteEmployeeVacationAsync(int? pEmployeeVacationID, int? pProjectID, int? pCreatedBy, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeVacationID",
                    Value = pEmployeeVacationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DeleteEmployeeVacation] @pEmployeeVacationID, @pProjectID, @pError OUTPUT, @pCreatedBy", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DeleteEmployeeVacationScheduleAsync(int? pEmployeeVacationID, int? pProjectID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeVacationID",
                    Value = pEmployeeVacationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DeleteEmployeeVacationSchedule] @pEmployeeVacationID, @pProjectID, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DeleteHolidayAsync(int? pHolidayID, int? pProjectID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pHolidayID",
                    Value = pHolidayID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DeleteHoliday] @pHolidayID, @pProjectID, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DeleteLookupTableAsync(int? pID, int? pProjectID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pID",
                    Value = pID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DeleteLookupTable] @pID, @pProjectID, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DeleteProjectsAsync(int? pProjectID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DeleteProjects] @pProjectID, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DeleteScheduleTimeAsync(int? pScheduleTimeID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pScheduleTimeID",
                    Value = pScheduleTimeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DeleteScheduleTime] @pScheduleTimeID, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DeleteScheduleTimeDetailAsync(int? pScheduleTimeID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pScheduleTimeID",
                    Value = pScheduleTimeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DeleteScheduleTimeDetail] @pScheduleTimeID, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DeleteScheduleTimeGroupAsync(int? pScheduleTimeID, int? pGroupID, int? pProjectID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pScheduleTimeID",
                    Value = pScheduleTimeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pGroupID",
                    Value = pGroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DeleteScheduleTimeGroup] @pScheduleTimeID, @pGroupID, @pProjectID, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DeleteSettingDetailsAsync(int? pProjectID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DeleteSettingDetails] @pProjectID, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DeleteShiftDetailsAsync(int? pShiftID, int? pProjectID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pShiftID",
                    Value = pShiftID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DeleteShiftDetails] @pShiftID, @pProjectID, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DeleteShiftsAsync(int? pShiftID, int? pProjectID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pShiftID",
                    Value = pShiftID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DeleteShifts] @pShiftID, @pProjectID, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DeleteTemplateAsync(string pTableName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pTableName",
                    Size = 250,
                    Value = pTableName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DeleteTemplate] @pTableName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DeleteUsersAsync(int? pUserID, int? pProjectID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pUserID",
                    Value = pUserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DeleteUsers] @pUserID, @pProjectID, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> FillEmployeeShiftDetailsAsync(int? pEmployeeID, int? pFromDate, int? pToDate, int? pShiftID, int? pEmployeeShiftID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFromDate",
                    Value = pFromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pToDate",
                    Value = pToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pShiftID",
                    Value = pShiftID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeShiftID",
                    Value = pEmployeeShiftID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[FillEmployeeShiftDetails] @pEmployeeID, @pFromDate, @pToDate, @pShiftID, @pEmployeeShiftID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAllowance_deductionResult>> GetAllowance_deductionAsync(int? pAllowanceID, int? pProjectID, int? pNatureID, string pSearch, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pAllowanceID",
                    Value = pAllowanceID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pNatureID",
                    Value = pNatureID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pSearch",
                    Size = 50,
                    Value = pSearch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAllowance_deductionResult>("EXEC @returnValue = [dbo].[GetAllowance_deduction] @pAllowanceID, @pProjectID, @pNatureID, @pSearch", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAttendanceResult>> GetAttendanceAsync(int? pID, int? pProjectID, int? pFromDate, int? pEmployeeID, int? pFlag, int? pToDate, int? pLanguageID, int? pCreatedBy, int? pDepartmentID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pID",
                    Value = pID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFromDate",
                    Value = pFromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFlag",
                    Value = pFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pToDate",
                    Value = pToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pLanguageID",
                    Value = pLanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pDepartmentID",
                    Value = pDepartmentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAttendanceResult>("EXEC @returnValue = [dbo].[GetAttendance] @pID, @pProjectID, @pFromDate, @pEmployeeID, @pFlag, @pToDate, @pLanguageID, @pCreatedBy, @pDepartmentID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAttendanceAutomaticActionTypeResult>> GetAttendanceAutomaticActionTypeAsync(int? pProjectID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAttendanceAutomaticActionTypeResult>("EXEC @returnValue = [dbo].[GetAttendanceAutomaticActionType] @pProjectID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAttendancePathResult>> GetAttendancePathAsync(int? pID, int? pProjectID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pID",
                    Value = pID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAttendancePathResult>("EXEC @returnValue = [dbo].[GetAttendancePath] @pID, @pProjectID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAttendancePathSetupResult>> GetAttendancePathSetupAsync(int? pID, int? pProjectID, int? pCreatedBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pID",
                    Value = pID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAttendancePathSetupResult>("EXEC @returnValue = [dbo].[GetAttendancePathSetup] @pID, @pProjectID, @pCreatedBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAutomaticAttendanceActioonsResult>> GetAutomaticAttendanceActioonsAsync(int? pEmployeeID, int? pFromDate, int? pToDate, int? pProjectID, int? pActionTypeID, int? pIsSolved, int? pCreatedBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFromDate",
                    Value = pFromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pToDate",
                    Value = pToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pActionTypeID",
                    Value = pActionTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pIsSolved",
                    Value = pIsSolved ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAutomaticAttendanceActioonsResult>("EXEC @returnValue = [dbo].[GetAutomaticAttendanceActioons] @pEmployeeID, @pFromDate, @pToDate, @pProjectID, @pActionTypeID, @pIsSolved, @pCreatedBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> GetCodeAsync(string pTableName, string pColumnName, int? pProjectID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pTableName",
                    Size = 50,
                    Value = pTableName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pColumnName",
                    Size = 50,
                    Value = pColumnName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[GetCode] @pTableName, @pColumnName, @pProjectID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmployeeAllowancesResult>> GetEmployeeAllowancesAsync(int? pEmployeeAllowanceID, int? pProjectID, int? pEmployeeID, int? pNatureID, int? pLanguageID, int? pFlag, int? pAllowanceID, int? pFromDate, int? pToDate, int? pDepartmentID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeAllowanceID",
                    Value = pEmployeeAllowanceID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pNatureID",
                    Value = pNatureID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pLanguageID",
                    Value = pLanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFlag",
                    Value = pFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pAllowanceID",
                    Value = pAllowanceID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFromDate",
                    Value = pFromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pToDate",
                    Value = pToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pDepartmentID",
                    Value = pDepartmentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmployeeAllowancesResult>("EXEC @returnValue = [dbo].[GetEmployeeAllowances] @pEmployeeAllowanceID, @pProjectID, @pEmployeeID, @pNatureID, @pLanguageID, @pFlag, @pAllowanceID, @pFromDate, @pToDate, @pDepartmentID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmployeeApprovalsResult>> GetEmployeeApprovalsAsync(int? pEmployeeID, int? pProjectID, int? pFromDate, int? pToDate, int? pLanguageID, int? pDirectSupervisorID, int? pStatusID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFromDate",
                    Value = pFromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pToDate",
                    Value = pToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pLanguageID",
                    Value = pLanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pDirectSupervisorID",
                    Value = pDirectSupervisorID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pStatusID",
                    Value = pStatusID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmployeeApprovalsResult>("EXEC @returnValue = [dbo].[GetEmployeeApprovals] @pEmployeeID, @pProjectID, @pFromDate, @pToDate, @pLanguageID, @pDirectSupervisorID, @pStatusID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmployeeAttendanceResult>> GetEmployeeAttendanceAsync(int? pEmployeeID, int? pFromDate, int? pToDate, int? pProjectID, int? pYearID, int? pVacationTypeID, int? pFlag, int? pDepartmentID, int? pLanguageID, int? pCreatedBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFromDate",
                    Value = pFromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pToDate",
                    Value = pToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pYearID",
                    Value = pYearID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pVacationTypeID",
                    Value = pVacationTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFlag",
                    Value = pFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pDepartmentID",
                    Value = pDepartmentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pLanguageID",
                    Value = pLanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmployeeAttendanceResult>("EXEC @returnValue = [dbo].[GetEmployeeAttendance] @pEmployeeID, @pFromDate, @pToDate, @pProjectID, @pYearID, @pVacationTypeID, @pFlag, @pDepartmentID, @pLanguageID, @pCreatedBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmployeeAttendanceByHoursResult>> GetEmployeeAttendanceByHoursAsync(int? pEmployeeID, int? pAttendnaceDate, int? pFromDate, int? pToDate, int? pProjectID, int? pLanguageID, int? pDepartmentID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pAttendnaceDate",
                    Value = pAttendnaceDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFromDate",
                    Value = pFromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pToDate",
                    Value = pToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pLanguageID",
                    Value = pLanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pDepartmentID",
                    Value = pDepartmentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmployeeAttendanceByHoursResult>("EXEC @returnValue = [dbo].[GetEmployeeAttendanceByHours] @pEmployeeID, @pAttendnaceDate, @pFromDate, @pToDate, @pProjectID, @pLanguageID, @pDepartmentID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmployeeAttendanceDailyResult>> GetEmployeeAttendanceDailyAsync(int? pEmployeeID, int? pFromDate, int? pToDate, int? pProjectID, int? pFlag, int? pLanguageID, int? pCreatedBy, int? pDepartmentID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFromDate",
                    Value = pFromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pToDate",
                    Value = pToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFlag",
                    Value = pFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pLanguageID",
                    Value = pLanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pDepartmentID",
                    Value = pDepartmentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmployeeAttendanceDailyResult>("EXEC @returnValue = [dbo].[GetEmployeeAttendanceDaily] @pEmployeeID, @pFromDate, @pToDate, @pProjectID, @pFlag, @pLanguageID, @pCreatedBy, @pDepartmentID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmployeeAttendanceDailyAbsentResult>> GetEmployeeAttendanceDailyAbsentAsync(int? pEmployeeID, int? pFromDate, int? pToDate, int? pProjectID, int? pFlag, int? pLanguageID, int? pCreatedBy, int? pDepartmentID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFromDate",
                    Value = pFromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pToDate",
                    Value = pToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFlag",
                    Value = pFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pLanguageID",
                    Value = pLanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pDepartmentID",
                    Value = pDepartmentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmployeeAttendanceDailyAbsentResult>("EXEC @returnValue = [dbo].[GetEmployeeAttendanceDailyAbsent] @pEmployeeID, @pFromDate, @pToDate, @pProjectID, @pFlag, @pLanguageID, @pCreatedBy, @pDepartmentID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmployeeAttendanceDailyAdditionalResult>> GetEmployeeAttendanceDailyAdditionalAsync(int? pEmployeeID, int? pFromDate, int? pToDate, int? pProjectID, int? pFlag, int? pLanguageID, int? pCreatedBy, int? pDepartmentID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFromDate",
                    Value = pFromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pToDate",
                    Value = pToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFlag",
                    Value = pFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pLanguageID",
                    Value = pLanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pDepartmentID",
                    Value = pDepartmentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmployeeAttendanceDailyAdditionalResult>("EXEC @returnValue = [dbo].[GetEmployeeAttendanceDailyAdditional] @pEmployeeID, @pFromDate, @pToDate, @pProjectID, @pFlag, @pLanguageID, @pCreatedBy, @pDepartmentID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmployeeAttendanceDailyBreakResult>> GetEmployeeAttendanceDailyBreakAsync(int? pEmployeeID, int? pFromDate, int? pToDate, int? pProjectID, int? pFlag, int? pLanguageID, int? pCreatedBy, int? pDepartmentID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFromDate",
                    Value = pFromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pToDate",
                    Value = pToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFlag",
                    Value = pFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pLanguageID",
                    Value = pLanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pDepartmentID",
                    Value = pDepartmentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmployeeAttendanceDailyBreakResult>("EXEC @returnValue = [dbo].[GetEmployeeAttendanceDailyBreak] @pEmployeeID, @pFromDate, @pToDate, @pProjectID, @pFlag, @pLanguageID, @pCreatedBy, @pDepartmentID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmployeeAttendanceDailyLateResult>> GetEmployeeAttendanceDailyLateAsync(int? pEmployeeID, int? pFromDate, int? pToDate, int? pProjectID, int? pFlag, int? pLanguageID, int? pCreatedBy, int? pDepartmentID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFromDate",
                    Value = pFromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pToDate",
                    Value = pToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFlag",
                    Value = pFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pLanguageID",
                    Value = pLanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pDepartmentID",
                    Value = pDepartmentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmployeeAttendanceDailyLateResult>("EXEC @returnValue = [dbo].[GetEmployeeAttendanceDailyLate] @pEmployeeID, @pFromDate, @pToDate, @pProjectID, @pFlag, @pLanguageID, @pCreatedBy, @pDepartmentID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmployeeAttendanceDailyMissingCheckOutResult>> GetEmployeeAttendanceDailyMissingCheckOutAsync(int? pEmployeeID, int? pFromDate, int? pToDate, int? pProjectID, int? pFlag, int? pLanguageID, int? pCreatedBy, int? pDepartmentID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFromDate",
                    Value = pFromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pToDate",
                    Value = pToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFlag",
                    Value = pFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pLanguageID",
                    Value = pLanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pDepartmentID",
                    Value = pDepartmentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmployeeAttendanceDailyMissingCheckOutResult>("EXEC @returnValue = [dbo].[GetEmployeeAttendanceDailyMissingCheckOut] @pEmployeeID, @pFromDate, @pToDate, @pProjectID, @pFlag, @pLanguageID, @pCreatedBy, @pDepartmentID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmployeeBalanceResult>> GetEmployeeBalanceAsync(int? pEmployeeID, int? pYearID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pYearID",
                    Value = pYearID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmployeeBalanceResult>("EXEC @returnValue = [dbo].[GetEmployeeBalance] @pEmployeeID, @pYearID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmployeeBalanceReportResult>> GetEmployeeBalanceReportAsync(int? pEmployeeID, int? pYearID, int? pProjectID, int? pFlag, int? pLanguageID, int? pVacationTypeID, int? pCreatedBy, int? pDepartmentID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pYearID",
                    Value = pYearID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFlag",
                    Value = pFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pLanguageID",
                    Value = pLanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pVacationTypeID",
                    Value = pVacationTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pDepartmentID",
                    Value = pDepartmentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmployeeBalanceReportResult>("EXEC @returnValue = [dbo].[GetEmployeeBalanceReport] @pEmployeeID, @pYearID, @pProjectID, @pFlag, @pLanguageID, @pVacationTypeID, @pCreatedBy, @pDepartmentID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmployeeContractsResult>> GetEmployeeContractsAsync(int? pContractID, int? pContractTypeID, int? pEmployeeID, int? pFromDate, int? pToDate, int? pProjectID, int? pLanguageID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pContractID",
                    Value = pContractID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pContractTypeID",
                    Value = pContractTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFromDate",
                    Value = pFromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pToDate",
                    Value = pToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pLanguageID",
                    Value = pLanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmployeeContractsResult>("EXEC @returnValue = [dbo].[GetEmployeeContracts] @pContractID, @pContractTypeID, @pEmployeeID, @pFromDate, @pToDate, @pProjectID, @pLanguageID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmployeeDeductionsResult>> GetEmployeeDeductionsAsync(int? pEmployeeDeductionID, int? pProjectID, int? pEmployeeID, int? pNatureID, int? pFlag, int? pAllowanceID, int? pFromDate, int? pToDate, int? pDepartmentID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeDeductionID",
                    Value = pEmployeeDeductionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pNatureID",
                    Value = pNatureID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFlag",
                    Value = pFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pAllowanceID",
                    Value = pAllowanceID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFromDate",
                    Value = pFromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pToDate",
                    Value = pToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pDepartmentID",
                    Value = pDepartmentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmployeeDeductionsResult>("EXEC @returnValue = [dbo].[GetEmployeeDeductions] @pEmployeeDeductionID, @pProjectID, @pEmployeeID, @pNatureID, @pFlag, @pAllowanceID, @pFromDate, @pToDate, @pDepartmentID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmployeeEndContractReportResult>> GetEmployeeEndContractReportAsync(int? pProjectID, int? pEmployeeID, int? pFlag, int? pLanguageID, int? pFromDate, int? pToDate, int? pFromPeriod, int? pToPeriod, int? pCreatedBy, int? pDepartmentID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFlag",
                    Value = pFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pLanguageID",
                    Value = pLanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFromDate",
                    Value = pFromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pToDate",
                    Value = pToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFromPeriod",
                    Value = pFromPeriod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pToPeriod",
                    Value = pToPeriod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pDepartmentID",
                    Value = pDepartmentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmployeeEndContractReportResult>("EXEC @returnValue = [dbo].[GetEmployeeEndContractReport] @pProjectID, @pEmployeeID, @pFlag, @pLanguageID, @pFromDate, @pToDate, @pFromPeriod, @pToPeriod, @pCreatedBy, @pDepartmentID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmployeeGroupsResult>> GetEmployeeGroupsAsync(int? pEmployeeGroupID, int? pEmployeeID, int? pProjectID, int? pGroupID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeGroupID",
                    Value = pEmployeeGroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pGroupID",
                    Value = pGroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmployeeGroupsResult>("EXEC @returnValue = [dbo].[GetEmployeeGroups] @pEmployeeGroupID, @pEmployeeID, @pProjectID, @pGroupID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmployeeHolidayResult>> GetEmployeeHolidayAsync(int? pEmployeeID, int? pMonthID, int? pYearID, int? pProjectID, int? pCreatedBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pMonthID",
                    Value = pMonthID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pYearID",
                    Value = pYearID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmployeeHolidayResult>("EXEC @returnValue = [dbo].[GetEmployeeHoliday] @pEmployeeID, @pMonthID, @pYearID, @pProjectID, @pCreatedBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmployeeHRServiceResult>> GetEmployeeHRServiceAsync(int? pEmployeeHRServiceID, int? pEmployeeID, int? pProjectID, int? pFromDate, int? pToDate, int? pStatusID, int? pLanguageID, int? pHRServiceID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeHRServiceID",
                    Value = pEmployeeHRServiceID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFromDate",
                    Value = pFromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pToDate",
                    Value = pToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pStatusID",
                    Value = pStatusID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pLanguageID",
                    Value = pLanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pHRServiceID",
                    Value = pHRServiceID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmployeeHRServiceResult>("EXEC @returnValue = [dbo].[GetEmployeeHRService] @pEmployeeHRServiceID, @pEmployeeID, @pProjectID, @pFromDate, @pToDate, @pStatusID, @pLanguageID, @pHRServiceID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmployeeHRServiceReportResult>> GetEmployeeHRServiceReportAsync(int? pEmployeeHRServiceID, int? pEmployeeID, int? pProjectID, int? pLanguageID, int? pCreatedBy, int? pDepartmentID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeHRServiceID",
                    Value = pEmployeeHRServiceID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pLanguageID",
                    Value = pLanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pDepartmentID",
                    Value = pDepartmentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmployeeHRServiceReportResult>("EXEC @returnValue = [dbo].[GetEmployeeHRServiceReport] @pEmployeeHRServiceID, @pEmployeeID, @pProjectID, @pLanguageID, @pCreatedBy, @pDepartmentID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmployeeInjuryResult>> GetEmployeeInjuryAsync(int? pEmployeeInjuryID, int? pEmployeeID, int? pProjectID, int? pFromDate, int? pToDate, int? pStatusID, int? pLanguageID, int? pInjuryID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeInjuryID",
                    Value = pEmployeeInjuryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFromDate",
                    Value = pFromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pToDate",
                    Value = pToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pStatusID",
                    Value = pStatusID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pLanguageID",
                    Value = pLanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pInjuryID",
                    Value = pInjuryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmployeeInjuryResult>("EXEC @returnValue = [dbo].[GetEmployeeInjury] @pEmployeeInjuryID, @pEmployeeID, @pProjectID, @pFromDate, @pToDate, @pStatusID, @pLanguageID, @pInjuryID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmployeeInjuryReportResult>> GetEmployeeInjuryReportAsync(int? pEmployeeInjuryID, int? pEmployeeID, int? pProjectID, int? pLanguageID, int? pInjuryID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeInjuryID",
                    Value = pEmployeeInjuryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pLanguageID",
                    Value = pLanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pInjuryID",
                    Value = pInjuryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmployeeInjuryReportResult>("EXEC @returnValue = [dbo].[GetEmployeeInjuryReport] @pEmployeeInjuryID, @pEmployeeID, @pProjectID, @pLanguageID, @pInjuryID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmployeeLeaveReportResult>> GetEmployeeLeaveReportAsync(int? pEmployeeID, int? pFromDate, int? pToDate, int? pProjectID, int? pFlag, int? pLanguageID, int? pCreatedBy, int? pVacationTypeID, int? pDepartmentID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFromDate",
                    Value = pFromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pToDate",
                    Value = pToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFlag",
                    Value = pFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pLanguageID",
                    Value = pLanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pVacationTypeID",
                    Value = pVacationTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pDepartmentID",
                    Value = pDepartmentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmployeeLeaveReportResult>("EXEC @returnValue = [dbo].[GetEmployeeLeaveReport] @pEmployeeID, @pFromDate, @pToDate, @pProjectID, @pFlag, @pLanguageID, @pCreatedBy, @pVacationTypeID, @pDepartmentID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmployeeLeavesResult>> GetEmployeeLeavesAsync(int? pEmployeeLeaveID, int? pEmployeeID, int? pProjectID, int? pFromDate, int? pToDate, int? pLeaveTypeID, int? pLanguageID, int? pDirectSupervisorID, int? pCreatedBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeLeaveID",
                    Value = pEmployeeLeaveID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFromDate",
                    Value = pFromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pToDate",
                    Value = pToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pLeaveTypeID",
                    Value = pLeaveTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pLanguageID",
                    Value = pLanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pDirectSupervisorID",
                    Value = pDirectSupervisorID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmployeeLeavesResult>("EXEC @returnValue = [dbo].[GetEmployeeLeaves] @pEmployeeLeaveID, @pEmployeeID, @pProjectID, @pFromDate, @pToDate, @pLeaveTypeID, @pLanguageID, @pDirectSupervisorID, @pCreatedBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmployeeLoanResult>> GetEmployeeLoanAsync(int? pEmployeeLoanID, int? pEmployeeID, int? pProjectID, int? pFromDate, int? pToDate, int? pLanguageID, int? pLoanTypeID, int? pFlag, int? pCreatedBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeLoanID",
                    Value = pEmployeeLoanID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFromDate",
                    Value = pFromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pToDate",
                    Value = pToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pLanguageID",
                    Value = pLanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pLoanTypeID",
                    Value = pLoanTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFlag",
                    Value = pFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmployeeLoanResult>("EXEC @returnValue = [dbo].[GetEmployeeLoan] @pEmployeeLoanID, @pEmployeeID, @pProjectID, @pFromDate, @pToDate, @pLanguageID, @pLoanTypeID, @pFlag, @pCreatedBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmployeeLoanReportResult>> GetEmployeeLoanReportAsync(int? pEmployeeLoanID, int? pEmployeeID, int? pProjectID, int? pFromDate, int? pToDate, int? pLanguageID, int? pLoanTypeID, int? pFlag, int? pCreatedBy, int? pDepartmentID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeLoanID",
                    Value = pEmployeeLoanID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFromDate",
                    Value = pFromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pToDate",
                    Value = pToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pLanguageID",
                    Value = pLanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pLoanTypeID",
                    Value = pLoanTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFlag",
                    Value = pFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pDepartmentID",
                    Value = pDepartmentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmployeeLoanReportResult>("EXEC @returnValue = [dbo].[GetEmployeeLoanReport] @pEmployeeLoanID, @pEmployeeID, @pProjectID, @pFromDate, @pToDate, @pLanguageID, @pLoanTypeID, @pFlag, @pCreatedBy, @pDepartmentID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmployeeLoanReportTotalsResult>> GetEmployeeLoanReportTotalsAsync(int? pEmployeeLoanID, int? pEmployeeID, int? pProjectID, int? pFromDate, int? pToDate, int? pLanguageID, int? pLoanTypeID, int? pFlag, int? pCreatedBy, int? pDepartmentID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeLoanID",
                    Value = pEmployeeLoanID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFromDate",
                    Value = pFromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pToDate",
                    Value = pToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pLanguageID",
                    Value = pLanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pLoanTypeID",
                    Value = pLoanTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFlag",
                    Value = pFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pDepartmentID",
                    Value = pDepartmentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmployeeLoanReportTotalsResult>("EXEC @returnValue = [dbo].[GetEmployeeLoanReportTotals] @pEmployeeLoanID, @pEmployeeID, @pProjectID, @pFromDate, @pToDate, @pLanguageID, @pLoanTypeID, @pFlag, @pCreatedBy, @pDepartmentID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmployeeNotificationsResult>> GetEmployeeNotificationsAsync(int? pProjectID, int? pEmployeeID, int? pNatureID, int? pNotificationID, int? pFromDate, int? pToDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pNatureID",
                    Value = pNatureID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pNotificationID",
                    Value = pNotificationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFromDate",
                    Value = pFromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pToDate",
                    Value = pToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmployeeNotificationsResult>("EXEC @returnValue = [dbo].[GetEmployeeNotifications] @pProjectID, @pEmployeeID, @pNatureID, @pNotificationID, @pFromDate, @pToDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmployeeOvertimeResult>> GetEmployeeOvertimeAsync(int? pEmployeeID, int? pProjectID, int? pFromDate, int? pToDate, int? pCreatedBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFromDate",
                    Value = pFromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pToDate",
                    Value = pToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmployeeOvertimeResult>("EXEC @returnValue = [dbo].[GetEmployeeOvertime] @pEmployeeID, @pProjectID, @pFromDate, @pToDate, @pCreatedBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmployeePaperResult>> GetEmployeePaperAsync(int? pEmployeeID, int? pDetailID, int? pFlag, int? pLanguageID, int? pPaperID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pDetailID",
                    Value = pDetailID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFlag",
                    Value = pFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pLanguageID",
                    Value = pLanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pPaperID",
                    Value = pPaperID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmployeePaperResult>("EXEC @returnValue = [dbo].[GetEmployeePaper] @pEmployeeID, @pDetailID, @pFlag, @pLanguageID, @pPaperID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmployeePenaltyResult>> GetEmployeePenaltyAsync(int? pEmployeePenaltyID, int? pEmployeeID, int? pProjectID, int? pFromDate, int? pToDate, int? pStatusID, int? pLanguageID, int? pPenaltyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeePenaltyID",
                    Value = pEmployeePenaltyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFromDate",
                    Value = pFromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pToDate",
                    Value = pToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pStatusID",
                    Value = pStatusID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pLanguageID",
                    Value = pLanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pPenaltyID",
                    Value = pPenaltyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmployeePenaltyResult>("EXEC @returnValue = [dbo].[GetEmployeePenalty] @pEmployeePenaltyID, @pEmployeeID, @pProjectID, @pFromDate, @pToDate, @pStatusID, @pLanguageID, @pPenaltyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmployeePenaltyReportResult>> GetEmployeePenaltyReportAsync(int? pEmployeePenaltyID, int? pEmployeeID, int? pProjectID, int? pLanguageID, int? pPenaltyID, int? pDepartmentID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeePenaltyID",
                    Value = pEmployeePenaltyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pLanguageID",
                    Value = pLanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pPenaltyID",
                    Value = pPenaltyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pDepartmentID",
                    Value = pDepartmentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmployeePenaltyReportResult>("EXEC @returnValue = [dbo].[GetEmployeePenaltyReport] @pEmployeePenaltyID, @pEmployeeID, @pProjectID, @pLanguageID, @pPenaltyID, @pDepartmentID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmployeeReportResult>> GetEmployeeReportAsync(int? pProjectID, int? pEmployeeID, int? pFlag, int? pLanguageID, int? pCreatedBy, int? pFromDate, int? pToDate, int? pDepartmentID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFlag",
                    Value = pFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pLanguageID",
                    Value = pLanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFromDate",
                    Value = pFromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pToDate",
                    Value = pToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pDepartmentID",
                    Value = pDepartmentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmployeeReportResult>("EXEC @returnValue = [dbo].[GetEmployeeReport] @pProjectID, @pEmployeeID, @pFlag, @pLanguageID, @pCreatedBy, @pFromDate, @pToDate, @pDepartmentID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmployeesResult>> GetEmployeesAsync(int? pProjectID, int? pStatusID, int? pEmployeeID, string pSearch, int? psupervisorid, int? pLoginUserID, int? pCreatedBy, int? pDepartmentID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pStatusID",
                    Value = pStatusID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pSearch",
                    Size = 50,
                    Value = pSearch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "psupervisorid",
                    Value = psupervisorid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pLoginUserID",
                    Value = pLoginUserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pDepartmentID",
                    Value = pDepartmentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmployeesResult>("EXEC @returnValue = [dbo].[GetEmployees] @pProjectID, @pStatusID, @pEmployeeID, @pSearch, @psupervisorid, @pLoginUserID, @pCreatedBy, @pDepartmentID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmployeeSalaryResult>> GetEmployeeSalaryAsync(int? pProjectID, int? pEmployeeID, int? pStatusID, int? pTypeID, int? pCurrentYearID, int? pCurrentMonthID, int? pLanguageID, int? pDepartmentID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pStatusID",
                    Value = pStatusID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pTypeID",
                    Value = pTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCurrentYearID",
                    Value = pCurrentYearID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCurrentMonthID",
                    Value = pCurrentMonthID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pLanguageID",
                    Value = pLanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pDepartmentID",
                    Value = pDepartmentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmployeeSalaryResult>("EXEC @returnValue = [dbo].[GetEmployeeSalary] @pProjectID, @pEmployeeID, @pStatusID, @pTypeID, @pCurrentYearID, @pCurrentMonthID, @pLanguageID, @pDepartmentID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmployeeSalaryReportResult>> GetEmployeeSalaryReportAsync(int? pProjectID, int? pEmployeeID, int? pCurrentYearID, int? pCurrentMonthID, int? pIsAllEmployees, int? pWIthDetail, int? pLanguageID, int? pCreatedBy, int? pFlag, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCurrentYearID",
                    Value = pCurrentYearID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCurrentMonthID",
                    Value = pCurrentMonthID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pIsAllEmployees",
                    Value = pIsAllEmployees ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pWIthDetail",
                    Value = pWIthDetail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pLanguageID",
                    Value = pLanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFlag",
                    Value = pFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmployeeSalaryReportResult>("EXEC @returnValue = [dbo].[GetEmployeeSalaryReport] @pProjectID, @pEmployeeID, @pCurrentYearID, @pCurrentMonthID, @pIsAllEmployees, @pWIthDetail, @pLanguageID, @pCreatedBy, @pFlag", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmployeeSalaryReport2Result>> GetEmployeeSalaryReport2Async(int? pProjectID, int? pCurrentYearID, int? pCurrentMonthID, int? pDepartmentID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCurrentYearID",
                    Value = pCurrentYearID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCurrentMonthID",
                    Value = pCurrentMonthID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pDepartmentID",
                    Value = pDepartmentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmployeeSalaryReport2Result>("EXEC @returnValue = [dbo].[GetEmployeeSalaryReport2] @pProjectID, @pCurrentYearID, @pCurrentMonthID, @pDepartmentID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmployeeShiftCheckResult>> GetEmployeeShiftCheckAsync(int? pProjectID, int? pEmployeeID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmployeeShiftCheckResult>("EXEC @returnValue = [dbo].[GetEmployeeShiftCheck] @pProjectID, @pEmployeeID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmployeeShiftsResult>> GetEmployeeShiftsAsync(int? pEmployeeShiftID, int? pEmployeeID, int? pProjectID, int? pFromDate, int? pToDate, int? pCreatedBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeShiftID",
                    Value = pEmployeeShiftID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFromDate",
                    Value = pFromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pToDate",
                    Value = pToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmployeeShiftsResult>("EXEC @returnValue = [dbo].[GetEmployeeShifts] @pEmployeeShiftID, @pEmployeeID, @pProjectID, @pFromDate, @pToDate, @pCreatedBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmployeeTransactionResult>> GetEmployeeTransactionAsync(int? pEmployeeTransactionID, int? pEmployeeID, int? pProjectID, int? pFromDate, int? pToDate, int? pFlag, int? pTransactionTypeID, int? pLanguageID, int? pCreatedBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeTransactionID",
                    Value = pEmployeeTransactionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFromDate",
                    Value = pFromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pToDate",
                    Value = pToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFlag",
                    Value = pFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pTransactionTypeID",
                    Value = pTransactionTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pLanguageID",
                    Value = pLanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmployeeTransactionResult>("EXEC @returnValue = [dbo].[GetEmployeeTransaction] @pEmployeeTransactionID, @pEmployeeID, @pProjectID, @pFromDate, @pToDate, @pFlag, @pTransactionTypeID, @pLanguageID, @pCreatedBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmployeeVacationResult>> GetEmployeeVacationAsync(int? pEmployeeVacationID, int? pEmployeeID, int? pProjectID, int? pFromDate, int? pToDate, int? pLanguageID, int? pDirectSupervisorID, int? pCreatedBy, int? pVacationTypeID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeVacationID",
                    Value = pEmployeeVacationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFromDate",
                    Value = pFromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pToDate",
                    Value = pToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pLanguageID",
                    Value = pLanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pDirectSupervisorID",
                    Value = pDirectSupervisorID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pVacationTypeID",
                    Value = pVacationTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmployeeVacationResult>("EXEC @returnValue = [dbo].[GetEmployeeVacation] @pEmployeeVacationID, @pEmployeeID, @pProjectID, @pFromDate, @pToDate, @pLanguageID, @pDirectSupervisorID, @pCreatedBy, @pVacationTypeID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmployeeVacationReportResult>> GetEmployeeVacationReportAsync(int? pEmployeeVacationID, int? pEmployeeID, int? pProjectID, int? pFromDate, int? pToDate, int? pFlag, int? pCreatedBy, int? pvacationTypeID, int? pDepartmentID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeVacationID",
                    Value = pEmployeeVacationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFromDate",
                    Value = pFromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pToDate",
                    Value = pToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFlag",
                    Value = pFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pvacationTypeID",
                    Value = pvacationTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pDepartmentID",
                    Value = pDepartmentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmployeeVacationReportResult>("EXEC @returnValue = [dbo].[GetEmployeeVacationReport] @pEmployeeVacationID, @pEmployeeID, @pProjectID, @pFromDate, @pToDate, @pFlag, @pCreatedBy, @pvacationTypeID, @pDepartmentID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmployeeVacationScheduleResult>> GetEmployeeVacationScheduleAsync(int? pEmployeeVacationID, int? pEmployeeID, int? pProjectID, int? pFromDate, int? pToDate, int? pLanguageID, int? pDirectSupervisorID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeVacationID",
                    Value = pEmployeeVacationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFromDate",
                    Value = pFromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pToDate",
                    Value = pToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pLanguageID",
                    Value = pLanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pDirectSupervisorID",
                    Value = pDirectSupervisorID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmployeeVacationScheduleResult>("EXEC @returnValue = [dbo].[GetEmployeeVacationSchedule] @pEmployeeVacationID, @pEmployeeID, @pProjectID, @pFromDate, @pToDate, @pLanguageID, @pDirectSupervisorID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEMployeeWeeklyHolidayResult>> GetEMployeeWeeklyHolidayAsync(int? pEmployeeID, int? pMonthID, int? pYearID, int? pDayID, int? pProjectID, int? pLoginUserID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pMonthID",
                    Value = pMonthID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pYearID",
                    Value = pYearID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pDayID",
                    Value = pDayID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pLoginUserID",
                    Value = pLoginUserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEMployeeWeeklyHolidayResult>("EXEC @returnValue = [dbo].[GetEMployeeWeeklyHoliday] @pEmployeeID, @pMonthID, @pYearID, @pDayID, @pProjectID, @pLoginUserID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetGroupsResult>> GetGroupsAsync(int? pGroupID, int? pProjectID, string pSearch, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pGroupID",
                    Value = pGroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pSearch",
                    Size = 50,
                    Value = pSearch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetGroupsResult>("EXEC @returnValue = [dbo].[GetGroups] @pGroupID, @pProjectID, @pSearch", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetHolidayResult>> GetHolidayAsync(int? pHolidayID, int? pProjectID, int? pFromDate, int? pToDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pHolidayID",
                    Value = pHolidayID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFromDate",
                    Value = pFromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pToDate",
                    Value = pToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetHolidayResult>("EXEC @returnValue = [dbo].[GetHoliday] @pHolidayID, @pProjectID, @pFromDate, @pToDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetIdsResult>> GetIdsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetIdsResult>("EXEC @returnValue = [dbo].[GetIds]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetLookupTableResult>> GetLookupTableAsync(int? pID, int? pProjectID, int? pParentID, string pTableName, string pColumnName, int? pLanguageID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pID",
                    Value = pID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pParentID",
                    Value = pParentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pTableName",
                    Size = 100,
                    Value = pTableName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pColumnName",
                    Size = 100,
                    Value = pColumnName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pLanguageID",
                    Value = pLanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetLookupTableResult>("EXEC @returnValue = [dbo].[GetLookupTable] @pID, @pProjectID, @pParentID, @pTableName, @pColumnName, @pLanguageID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetProjectFeaturesResult>> GetProjectFeaturesAsync(int? pProjectID, int? pFlag, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFlag",
                    Value = pFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetProjectFeaturesResult>("EXEC @returnValue = [dbo].[GetProjectFeatures] @pProjectID, @pFlag", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetProjectsResult>> GetProjectsAsync(int? pProjectID, int? pFlag, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFlag",
                    Value = pFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetProjectsResult>("EXEC @returnValue = [dbo].[GetProjects] @pProjectID, @pFlag", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetRemindersResult>> GetRemindersAsync(int? pProjectID, int? pEmployeeID, int? pFlag, int? pLanguageID, int? pFromDate, int? pToDate, int? pTypeID, int? pUserID, int? pUserTypeID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFlag",
                    Value = pFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pLanguageID",
                    Value = pLanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFromDate",
                    Value = pFromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pToDate",
                    Value = pToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pTypeID",
                    Value = pTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pUserID",
                    Value = pUserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pUserTypeID",
                    Value = pUserTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetRemindersResult>("EXEC @returnValue = [dbo].[GetReminders] @pProjectID, @pEmployeeID, @pFlag, @pLanguageID, @pFromDate, @pToDate, @pTypeID, @pUserID, @pUserTypeID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetScheduleTimeResult>> GetScheduleTimeAsync(int? pScheduleTimeID, int? pDoorID, int? pProjectID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pScheduleTimeID",
                    Value = pScheduleTimeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pDoorID",
                    Value = pDoorID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetScheduleTimeResult>("EXEC @returnValue = [dbo].[GetScheduleTime] @pScheduleTimeID, @pDoorID, @pProjectID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetScheduleTimeDetailResult>> GetScheduleTimeDetailAsync(int? pScheduleTimeID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pScheduleTimeID",
                    Value = pScheduleTimeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetScheduleTimeDetailResult>("EXEC @returnValue = [dbo].[GetScheduleTimeDetail] @pScheduleTimeID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetScheduleTimeGroupResult>> GetScheduleTimeGroupAsync(int? pScheduleTimeID, int? pGroupID, int? pProjectID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pScheduleTimeID",
                    Value = pScheduleTimeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pGroupID",
                    Value = pGroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetScheduleTimeGroupResult>("EXEC @returnValue = [dbo].[GetScheduleTimeGroup] @pScheduleTimeID, @pGroupID, @pProjectID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetSettingDetailsResult>> GetSettingDetailsAsync(int? pProjectID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetSettingDetailsResult>("EXEC @returnValue = [dbo].[GetSettingDetails] @pProjectID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetSettingsResult>> GetSettingsAsync(int? pProjectID, int? pFlag, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFlag",
                    Value = pFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetSettingsResult>("EXEC @returnValue = [dbo].[GetSettings] @pProjectID, @pFlag", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetShiftAllowanceResult>> GetShiftAllowanceAsync(int? pShiftID, int? pAllowanceID, int? pProjectID, int? pFlag, int? pStartDate, int? pEndDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pShiftID",
                    Value = pShiftID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pAllowanceID",
                    Value = pAllowanceID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFlag",
                    Value = pFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pStartDate",
                    Value = pStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEndDate",
                    Value = pEndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetShiftAllowanceResult>("EXEC @returnValue = [dbo].[GetShiftAllowance] @pShiftID, @pAllowanceID, @pProjectID, @pFlag, @pStartDate, @pEndDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetShiftDetailsResult>> GetShiftDetailsAsync(int? pShiftID, int? pDayID, int? pProjectID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pShiftID",
                    Value = pShiftID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pDayID",
                    Value = pDayID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetShiftDetailsResult>("EXEC @returnValue = [dbo].[GetShiftDetails] @pShiftID, @pDayID, @pProjectID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetShiftsResult>> GetShiftsAsync(int? pShiftID, int? pProjectID, string pSearch, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pShiftID",
                    Value = pShiftID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pSearch",
                    Size = 50,
                    Value = pSearch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetShiftsResult>("EXEC @returnValue = [dbo].[GetShifts] @pShiftID, @pProjectID, @pSearch", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> GetTemplateAsync(string pTableName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pTableName",
                    Size = 250,
                    Value = pTableName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[GetTemplate] @pTableName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetUsersResult>> GetUsersAsync(int? pUserID, int? pProjectID, string pUserName, string pUserPassword, int? pUserTypeID, string pBiosID, int? pFlag, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pUserID",
                    Value = pUserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pUserName",
                    Size = 50,
                    Value = pUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pUserPassword",
                    Size = 50,
                    Value = pUserPassword ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pUserTypeID",
                    Value = pUserTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pBiosID",
                    Size = 100,
                    Value = pBiosID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pFlag",
                    Value = pFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetUsersResult>("EXEC @returnValue = [dbo].[GetUsers] @pUserID, @pProjectID, @pUserName, @pUserPassword, @pUserTypeID, @pBiosID, @pFlag", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> InsertAllowance_deductionAsync(string pDefaultDesc, int? pTypeID, decimal? pAmount, int? pCalculateTypeID, int? pNatureID, int? pIsDefault, int? pCreatedBy, int? pProjectID, OutputParameter<int?> pAllowanceID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpAllowanceID = new SqlParameter
            {
                ParameterName = "pAllowanceID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pAllowanceID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterpAllowanceID,
                new SqlParameter
                {
                    ParameterName = "pDefaultDesc",
                    Size = 100,
                    Value = pDefaultDesc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pTypeID",
                    Value = pTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pAmount",
                    Precision = 18,
                    Scale = 5,
                    Value = pAmount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "pCalculateTypeID",
                    Value = pCalculateTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pNatureID",
                    Value = pNatureID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pIsDefault",
                    Value = pIsDefault ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[InsertAllowance_deduction] @pAllowanceID OUTPUT, @pDefaultDesc, @pTypeID, @pAmount, @pCalculateTypeID, @pNatureID, @pIsDefault, @pCreatedBy, @pProjectID, @pError OUTPUT", sqlParameters, cancellationToken);

            pAllowanceID.SetValue(parameterpAllowanceID.Value);
            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<InsertAttendanceResult>> InsertAttendanceAsync(int? pAttDate, string pType, int? pEmployeeID, int? pStatusID, int? pattdateint, int? pProjectID, DateTime? pDatetime, OutputParameter<int?> pID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpID = new SqlParameter
            {
                ParameterName = "pID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterpID,
                new SqlParameter
                {
                    ParameterName = "pAttDate",
                    Value = pAttDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pType",
                    Size = 50,
                    Value = pType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pStatusID",
                    Value = pStatusID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pattdateint",
                    Value = pattdateint ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                new SqlParameter
                {
                    ParameterName = "pDatetime",
                    Value = pDatetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<InsertAttendanceResult>("EXEC @returnValue = [dbo].[InsertAttendance] @pID OUTPUT, @pAttDate, @pType, @pEmployeeID, @pStatusID, @pattdateint, @pProjectID, @pError OUTPUT, @pDatetime", sqlParameters, cancellationToken);

            pID.SetValue(parameterpID.Value);
            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> InsertAttendancePathAsync(string ppath, int? pProjectID, OutputParameter<int?> pID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpID = new SqlParameter
            {
                ParameterName = "pID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterpID,
                new SqlParameter
                {
                    ParameterName = "ppath",
                    Size = 1000,
                    Value = ppath ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[InsertAttendancePath] @pID OUTPUT, @ppath, @pProjectID, @pError OUTPUT", sqlParameters, cancellationToken);

            pID.SetValue(parameterpID.Value);
            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> InsertAttendancePathSetupAsync(string pIP, string pPort, string pUserName, string pPassword, string pWindowsVersion, string pTypeDesc, string pMaxLogID, string pMaxLogDate, int? pProjectID, string pMachineNumber, string pMachineName, int? pDeviceModel, int? pCreatedBy, OutputParameter<int?> pID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpID = new SqlParameter
            {
                ParameterName = "pID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterpID,
                new SqlParameter
                {
                    ParameterName = "pIP",
                    Size = 100,
                    Value = pIP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pPort",
                    Size = 100,
                    Value = pPort ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pUserName",
                    Size = 100,
                    Value = pUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pPassword",
                    Size = 100,
                    Value = pPassword ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pWindowsVersion",
                    Size = 100,
                    Value = pWindowsVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pTypeDesc",
                    Size = 100,
                    Value = pTypeDesc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pMaxLogID",
                    Size = 100,
                    Value = pMaxLogID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pMaxLogDate",
                    Size = 100,
                    Value = pMaxLogDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pMachineNumber",
                    Size = 50,
                    Value = pMachineNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pMachineName",
                    Size = 1000,
                    Value = pMachineName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pDeviceModel",
                    Value = pDeviceModel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[InsertAttendancePathSetup] @pID OUTPUT, @pIP, @pPort, @pUserName, @pPassword, @pWindowsVersion, @pTypeDesc, @pMaxLogID, @pMaxLogDate, @pProjectID, @pMachineNumber, @pMachineName, @pDeviceModel, @pError OUTPUT, @pCreatedBy", sqlParameters, cancellationToken);

            pID.SetValue(parameterpID.Value);
            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<InsertAutomaticAttendanceActionsResult>> InsertAutomaticAttendanceActionsAsync(int? pEmployeeID, int? pVacationTypeID, int? pActionTypeID, int? pAttendanceDate, int? pCreatedBy, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pVacationTypeID",
                    Value = pVacationTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pActionTypeID",
                    Value = pActionTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pAttendanceDate",
                    Value = pAttendanceDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<InsertAutomaticAttendanceActionsResult>("EXEC @returnValue = [dbo].[InsertAutomaticAttendanceActions] @pEmployeeID, @pVacationTypeID, @pActionTypeID, @pAttendanceDate, @pCreatedBy, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> InsertEmployeeAttendanceAsync(int? pEmployeeID, int? pProjectID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[InsertEmployeeAttendance] @pEmployeeID, @pProjectID, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> InsertEmployeeAttendanceByHoursAsync(int? pShiftID1, int? pShiftID2, int? pShiftID3, int? pWorkingHours1, int? pCreatedBy, int? pIsWorkigDay, int? pWorkingHours2, int? pWorkingHours3, OutputParameter<int?> pEmployeeID, OutputParameter<int?> pAttendanceDate, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpEmployeeID = new SqlParameter
            {
                ParameterName = "pEmployeeID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pEmployeeID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterpAttendanceDate = new SqlParameter
            {
                ParameterName = "pAttendanceDate",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pAttendanceDate?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterpEmployeeID,
                parameterpAttendanceDate,
                new SqlParameter
                {
                    ParameterName = "pShiftID1",
                    Value = pShiftID1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pShiftID2",
                    Value = pShiftID2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pShiftID3",
                    Value = pShiftID3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pWorkingHours1",
                    Value = pWorkingHours1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pIsWorkigDay",
                    Value = pIsWorkigDay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                new SqlParameter
                {
                    ParameterName = "pWorkingHours2",
                    Value = pWorkingHours2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pWorkingHours3",
                    Value = pWorkingHours3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[InsertEmployeeAttendanceByHours] @pEmployeeID OUTPUT, @pAttendanceDate OUTPUT, @pShiftID1, @pShiftID2, @pShiftID3, @pWorkingHours1, @pCreatedBy, @pIsWorkigDay, @pError OUTPUT, @pWorkingHours2, @pWorkingHours3", sqlParameters, cancellationToken);

            pEmployeeID.SetValue(parameterpEmployeeID.Value);
            pAttendanceDate.SetValue(parameterpAttendanceDate.Value);
            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> InsertEmployeeBalanceAsync(int? pCurrentBalance, int? pPreviousBalance, int? pCreatedBy, int? pActualBalance, OutputParameter<int?> pEmployeeID, OutputParameter<int?> pYearID, OutputParameter<int?> pProjectID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpEmployeeID = new SqlParameter
            {
                ParameterName = "pEmployeeID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pEmployeeID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterpYearID = new SqlParameter
            {
                ParameterName = "pYearID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pYearID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterpProjectID = new SqlParameter
            {
                ParameterName = "pProjectID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pProjectID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterpEmployeeID,
                parameterpYearID,
                new SqlParameter
                {
                    ParameterName = "pCurrentBalance",
                    Value = pCurrentBalance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pPreviousBalance",
                    Value = pPreviousBalance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pActualBalance",
                    Value = pActualBalance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpProjectID,
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[InsertEmployeeBalance] @pEmployeeID OUTPUT, @pYearID OUTPUT, @pCurrentBalance, @pPreviousBalance, @pCreatedBy, @pActualBalance, @pProjectID OUTPUT, @pError OUTPUT", sqlParameters, cancellationToken);

            pEmployeeID.SetValue(parameterpEmployeeID.Value);
            pYearID.SetValue(parameterpYearID.Value);
            pProjectID.SetValue(parameterpProjectID.Value);
            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> InsertEmployeeContractsAsync(int? pStartDate, int? pEndDate, int? pEmployeeID, decimal? pSalary, int? pCreatedBy, decimal? pSocialSecuritySalary, int? pProjectID, int? pIsDailyWork, int? pContractTypeID, int? pincometaxtype, int? pCompanyID, OutputParameter<int?> pContractID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpContractID = new SqlParameter
            {
                ParameterName = "pContractID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pContractID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterpContractID,
                new SqlParameter
                {
                    ParameterName = "pStartDate",
                    Value = pStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEndDate",
                    Value = pEndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pSalary",
                    Precision = 18,
                    Scale = 5,
                    Value = pSalary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pSocialSecuritySalary",
                    Precision = 18,
                    Scale = 5,
                    Value = pSocialSecuritySalary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pIsDailyWork",
                    Value = pIsDailyWork ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pContractTypeID",
                    Value = pContractTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pincometaxtype",
                    Value = pincometaxtype ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCompanyID",
                    Value = pCompanyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[InsertEmployeeContracts] @pContractID OUTPUT, @pStartDate, @pEndDate, @pEmployeeID, @pSalary, @pCreatedBy, @pSocialSecuritySalary, @pProjectID, @pIsDailyWork, @pContractTypeID, @pincometaxtype, @pCompanyID, @pError OUTPUT", sqlParameters, cancellationToken);

            pContractID.SetValue(parameterpContractID.Value);
            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<InsertEmployeeHolidayResult>> InsertEmployeeHolidayAsync(string pEmployeeID, string pDayID, int? pMonthID, int? pYearID, int? pCreatedBy, int? pProjectID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Size = 8000,
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pDayID",
                    Size = 8000,
                    Value = pDayID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pMonthID",
                    Value = pMonthID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pYearID",
                    Value = pYearID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<InsertEmployeeHolidayResult>("EXEC @returnValue = [dbo].[InsertEmployeeHoliday] @pEmployeeID, @pDayID, @pMonthID, @pYearID, @pCreatedBy, @pProjectID, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> InsertEmployeePaperAsync(int? pEmployeeID, int? pPaperID, string pPaperPath, string pNotes, int? pCratedBy, OutputParameter<int?> pDetailID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpDetailID = new SqlParameter
            {
                ParameterName = "pDetailID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pDetailID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pPaperID",
                    Value = pPaperID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpDetailID,
                new SqlParameter
                {
                    ParameterName = "pPaperPath",
                    Size = 1000,
                    Value = pPaperPath ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pNotes",
                    Size = 1000,
                    Value = pNotes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pCratedBy",
                    Value = pCratedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[InsertEmployeePaper] @pEmployeeID, @pPaperID, @pDetailID OUTPUT, @pPaperPath, @pNotes, @pCratedBy, @pError OUTPUT", sqlParameters, cancellationToken);

            pDetailID.SetValue(parameterpDetailID.Value);
            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> InsertEmployeesAsync(string pEmployeeName, string pEmployeeNumber, int? pStatusID, int? pSettingID, int? pCreatedBy, string pNationalId, string pSocialNumber, string pCareerNumber, string pJobTitleName, int? pBirthDate, int? pGenderID, int? pNationalityID, string pMobileNo, string pEmailNo, int? pMaritalStatusID, string pEmergencyCallName, string pEmergencyCallMobile, string pAccountNo, string pIBAN, int? pBankID, int? pBranchID, string pEmployeeImage, int? pProjectID, int? pHasBreak, int? pStartDate, int? pDepartmentID, string pUserName, string pPassword, int? pSSNType, int? pIsDynamicShift, string pEmployeeNameEn, int? pIsMilitary, int? pJobTitleID, int? pSectionID, string pEmergencyCallMobile2, string pEmergencyCallName2, int? pDateForMozawleh, OutputParameter<int?> pEmployeeID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpEmployeeID = new SqlParameter
            {
                ParameterName = "pEmployeeID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pEmployeeID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterpEmployeeID,
                new SqlParameter
                {
                    ParameterName = "pEmployeeName",
                    Size = 1000,
                    Value = pEmployeeName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeNumber",
                    Size = 50,
                    Value = pEmployeeNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pStatusID",
                    Value = pStatusID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pSettingID",
                    Value = pSettingID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pNationalId",
                    Size = 100,
                    Value = pNationalId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pSocialNumber",
                    Size = 50,
                    Value = pSocialNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pCareerNumber",
                    Size = 50,
                    Value = pCareerNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pJobTitleName",
                    Size = 50,
                    Value = pJobTitleName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pBirthDate",
                    Value = pBirthDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pGenderID",
                    Value = pGenderID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pNationalityID",
                    Value = pNationalityID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pMobileNo",
                    Size = 50,
                    Value = pMobileNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pEmailNo",
                    Size = 50,
                    Value = pEmailNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pMaritalStatusID",
                    Value = pMaritalStatusID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmergencyCallName",
                    Size = 1000,
                    Value = pEmergencyCallName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pEmergencyCallMobile",
                    Size = 50,
                    Value = pEmergencyCallMobile ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pAccountNo",
                    Size = 100,
                    Value = pAccountNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pIBAN",
                    Size = 100,
                    Value = pIBAN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pBankID",
                    Value = pBankID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pBranchID",
                    Value = pBranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeImage",
                    Size = 1000,
                    Value = pEmployeeImage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pHasBreak",
                    Value = pHasBreak ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pStartDate",
                    Value = pStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pDepartmentID",
                    Value = pDepartmentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pUserName",
                    Size = 50,
                    Value = pUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pPassword",
                    Size = 50,
                    Value = pPassword ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pSSNType",
                    Value = pSSNType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pIsDynamicShift",
                    Value = pIsDynamicShift ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                new SqlParameter
                {
                    ParameterName = "pEmployeeNameEn",
                    Size = 200,
                    Value = pEmployeeNameEn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pIsMilitary",
                    Value = pIsMilitary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pJobTitleID",
                    Value = pJobTitleID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pSectionID",
                    Value = pSectionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmergencyCallMobile2",
                    Size = 200,
                    Value = pEmergencyCallMobile2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pEmergencyCallName2",
                    Size = 200,
                    Value = pEmergencyCallName2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pDateForMozawleh",
                    Value = pDateForMozawleh ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[InsertEmployees] @pEmployeeID OUTPUT, @pEmployeeName, @pEmployeeNumber, @pStatusID, @pSettingID, @pCreatedBy, @pNationalId, @pSocialNumber, @pCareerNumber, @pJobTitleName, @pBirthDate, @pGenderID, @pNationalityID, @pMobileNo, @pEmailNo, @pMaritalStatusID, @pEmergencyCallName, @pEmergencyCallMobile, @pAccountNo, @pIBAN, @pBankID, @pBranchID, @pEmployeeImage, @pProjectID, @pHasBreak, @pStartDate, @pDepartmentID, @pUserName, @pPassword, @pSSNType, @pIsDynamicShift, @pError OUTPUT, @pEmployeeNameEn, @pIsMilitary, @pJobTitleID, @pSectionID, @pEmergencyCallMobile2, @pEmergencyCallName2, @pDateForMozawleh", sqlParameters, cancellationToken);

            pEmployeeID.SetValue(parameterpEmployeeID.Value);
            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> InsertEmployeeSalaryAsync(int? pEmployeeID, int? pCurrentYearID, int? pCurrentMonthID, int? pTypeID, int? pSubTypeID, decimal? pAmount, int? pFromDate, int? pToDate, int? pStatusID, int? pCalculationDate, int? pCreatedBy, decimal? pAdditionalInWork, decimal? pAdditionalInHoliday, decimal? pmorninglate, int? pworkingdays, int? pmonthdays, int? pmissingcheckin, int? pmissingcheckout, int? pProjectID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCurrentYearID",
                    Value = pCurrentYearID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCurrentMonthID",
                    Value = pCurrentMonthID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pTypeID",
                    Value = pTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pSubTypeID",
                    Value = pSubTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pAmount",
                    Precision = 18,
                    Scale = 5,
                    Value = pAmount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "pFromDate",
                    Value = pFromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pToDate",
                    Value = pToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pStatusID",
                    Value = pStatusID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCalculationDate",
                    Value = pCalculationDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pAdditionalInWork",
                    Precision = 18,
                    Scale = 5,
                    Value = pAdditionalInWork ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "pAdditionalInHoliday",
                    Precision = 18,
                    Scale = 5,
                    Value = pAdditionalInHoliday ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "pmorninglate",
                    Precision = 18,
                    Scale = 5,
                    Value = pmorninglate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "pworkingdays",
                    Value = pworkingdays ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pmonthdays",
                    Value = pmonthdays ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pmissingcheckin",
                    Value = pmissingcheckin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pmissingcheckout",
                    Value = pmissingcheckout ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[InsertEmployeeSalary] @pEmployeeID, @pCurrentYearID, @pCurrentMonthID, @pTypeID, @pSubTypeID, @pAmount, @pFromDate, @pToDate, @pStatusID, @pCalculationDate, @pCreatedBy, @pAdditionalInWork, @pAdditionalInHoliday, @pmorninglate, @pworkingdays, @pmonthdays, @pmissingcheckin, @pmissingcheckout, @pProjectID, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<InsertEMployeeWeeklyHolidayResult>> InsertEMployeeWeeklyHolidayAsync(int? pEmployeeID, int? pMonthID, int? pYearID, string pDayID, string pStatusID, int? pCreatedBy, int? pProjectID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pMonthID",
                    Value = pMonthID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pYearID",
                    Value = pYearID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pDayID",
                    Size = 1000,
                    Value = pDayID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pStatusID",
                    Size = 1000,
                    Value = pStatusID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<InsertEMployeeWeeklyHolidayResult>("EXEC @returnValue = [dbo].[InsertEMployeeWeeklyHoliday] @pEmployeeID, @pMonthID, @pYearID, @pDayID, @pStatusID, @pCreatedBy, @pProjectID, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<InsertLookupTableResult>> InsertLookupTableAsync(string pTableName, string pColumnName, string pColumnValue, string pColumnDescription, int? pOrderBy, int? pBalance, int? pDefaultValue, int? pParentID, int? pProjectID, int? pEmployeeID, int? pCalWithHoliday, int? pIsHealthVacation, int? pIsInjuryVacation, int? pApprovalProcessID, int? pFirstPeriod, int? pSecondPeriod, int? pThirdPeriod, int? pFourthPeriod, int? pFifthPeriod, int? pPenaltyCategoryID2, int? pPenaltyCategoryID3, int? pPenaltyCategoryID4, int? pPenaltyCategoryID5, int? pIsWithoutSalaryVacation, int? pIsPersonalVacation, decimal? pWithoutSalaryVacationValue, OutputParameter<int?> pID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpID = new SqlParameter
            {
                ParameterName = "pID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterpID,
                new SqlParameter
                {
                    ParameterName = "pTableName",
                    Size = 50,
                    Value = pTableName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pColumnName",
                    Size = 50,
                    Value = pColumnName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pColumnValue",
                    Size = 50,
                    Value = pColumnValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pColumnDescription",
                    Size = 50,
                    Value = pColumnDescription ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pOrderBy",
                    Value = pOrderBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pBalance",
                    Value = pBalance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pDefaultValue",
                    Value = pDefaultValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pParentID",
                    Value = pParentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCalWithHoliday",
                    Value = pCalWithHoliday ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pIsHealthVacation",
                    Value = pIsHealthVacation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pIsInjuryVacation",
                    Value = pIsInjuryVacation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                new SqlParameter
                {
                    ParameterName = "pApprovalProcessID",
                    Value = pApprovalProcessID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFirstPeriod",
                    Value = pFirstPeriod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pSecondPeriod",
                    Value = pSecondPeriod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pThirdPeriod",
                    Value = pThirdPeriod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFourthPeriod",
                    Value = pFourthPeriod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFifthPeriod",
                    Value = pFifthPeriod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pPenaltyCategoryID2",
                    Value = pPenaltyCategoryID2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pPenaltyCategoryID3",
                    Value = pPenaltyCategoryID3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pPenaltyCategoryID4",
                    Value = pPenaltyCategoryID4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pPenaltyCategoryID5",
                    Value = pPenaltyCategoryID5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pIsWithoutSalaryVacation",
                    Value = pIsWithoutSalaryVacation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pIsPersonalVacation",
                    Value = pIsPersonalVacation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pWithoutSalaryVacationValue",
                    Precision = 18,
                    Scale = 3,
                    Value = pWithoutSalaryVacationValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<InsertLookupTableResult>("EXEC @returnValue = [dbo].[InsertLookupTable] @pID OUTPUT, @pTableName, @pColumnName, @pColumnValue, @pColumnDescription, @pOrderBy, @pBalance, @pDefaultValue, @pParentID, @pProjectID, @pEmployeeID, @pCalWithHoliday, @pIsHealthVacation, @pIsInjuryVacation, @pError OUTPUT, @pApprovalProcessID, @pFirstPeriod, @pSecondPeriod, @pThirdPeriod, @pFourthPeriod, @pFifthPeriod, @pPenaltyCategoryID2, @pPenaltyCategoryID3, @pPenaltyCategoryID4, @pPenaltyCategoryID5, @pIsWithoutSalaryVacation, @pIsPersonalVacation, @pWithoutSalaryVacationValue", sqlParameters, cancellationToken);

            pID.SetValue(parameterpID.Value);
            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> InsertProjectsAsync(string pProjectName, string pCompanyName, int? pIsActive, string pReportPath, string pimagepath, string pfootertitle1, string pfootertitle2, OutputParameter<int?> pProjectID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpProjectID = new SqlParameter
            {
                ParameterName = "pProjectID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pProjectID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterpProjectID,
                new SqlParameter
                {
                    ParameterName = "pProjectName",
                    Size = 200,
                    Value = pProjectName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pCompanyName",
                    Size = 200,
                    Value = pCompanyName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pIsActive",
                    Value = pIsActive ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pReportPath",
                    Size = 1000,
                    Value = pReportPath ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pimagepath",
                    Size = 1000,
                    Value = pimagepath ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pfootertitle1",
                    Size = 1000,
                    Value = pfootertitle1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pfootertitle2",
                    Size = 1000,
                    Value = pfootertitle2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[InsertProjects] @pProjectID OUTPUT, @pProjectName, @pCompanyName, @pIsActive, @pReportPath, @pimagepath, @pfootertitle1, @pfootertitle2, @pError OUTPUT", sqlParameters, cancellationToken);

            pProjectID.SetValue(parameterpProjectID.Value);
            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> InsertScheduleTimeAsync(int? pDoorID, string pDescription, int? pCreatedBy, int? pSuturday, int? pSunday, int? pMonday, int? pTueseday, int? pWhednesday, int? pThursday, int? pfriday, int? pProjectID, int? pStatusID, OutputParameter<int?> pScheduleTimeID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpScheduleTimeID = new SqlParameter
            {
                ParameterName = "pScheduleTimeID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pScheduleTimeID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterpScheduleTimeID,
                new SqlParameter
                {
                    ParameterName = "pDoorID",
                    Value = pDoorID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pDescription",
                    Size = 1000,
                    Value = pDescription ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pSuturday",
                    Value = pSuturday ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pSunday",
                    Value = pSunday ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pMonday",
                    Value = pMonday ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pTueseday",
                    Value = pTueseday ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pWhednesday",
                    Value = pWhednesday ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pThursday",
                    Value = pThursday ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pfriday",
                    Value = pfriday ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pStatusID",
                    Value = pStatusID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[InsertScheduleTime] @pScheduleTimeID OUTPUT, @pDoorID, @pDescription, @pCreatedBy, @pSuturday, @pSunday, @pMonday, @pTueseday, @pWhednesday, @pThursday, @pfriday, @pError OUTPUT, @pProjectID, @pStatusID", sqlParameters, cancellationToken);

            pScheduleTimeID.SetValue(parameterpScheduleTimeID.Value);
            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> InsertScheduleTimeDetailAsync(int? pDayID, int? pDetailID, int? pFromTime, int? ptotime, OutputParameter<int?> pScheduleTimeID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpScheduleTimeID = new SqlParameter
            {
                ParameterName = "pScheduleTimeID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pScheduleTimeID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterpScheduleTimeID,
                new SqlParameter
                {
                    ParameterName = "pDayID",
                    Value = pDayID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pDetailID",
                    Value = pDetailID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFromTime",
                    Value = pFromTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ptotime",
                    Value = ptotime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[InsertScheduleTimeDetail] @pScheduleTimeID OUTPUT, @pDayID, @pDetailID, @pFromTime, @ptotime, @pError OUTPUT", sqlParameters, cancellationToken);

            pScheduleTimeID.SetValue(parameterpScheduleTimeID.Value);
            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> InsertScheduleTimeGroupAsync(int? pcreatedby, OutputParameter<int?> pScheduleTimeID, OutputParameter<int?> pGroupID, OutputParameter<int?> pProjectID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpScheduleTimeID = new SqlParameter
            {
                ParameterName = "pScheduleTimeID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pScheduleTimeID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterpGroupID = new SqlParameter
            {
                ParameterName = "pGroupID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pGroupID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterpProjectID = new SqlParameter
            {
                ParameterName = "pProjectID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pProjectID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterpScheduleTimeID,
                parameterpGroupID,
                parameterpProjectID,
                new SqlParameter
                {
                    ParameterName = "pcreatedby",
                    Value = pcreatedby ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[InsertScheduleTimeGroup] @pScheduleTimeID OUTPUT, @pGroupID OUTPUT, @pProjectID OUTPUT, @pcreatedby, @pError OUTPUT", sqlParameters, cancellationToken);

            pScheduleTimeID.SetValue(parameterpScheduleTimeID.Value);
            pGroupID.SetValue(parameterpGroupID.Value);
            pProjectID.SetValue(parameterpProjectID.Value);
            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<InsertSettingDetailsResult>> InsertSettingDetailsAsync(int? pDayID, int? pStartTime, int? pEndTime, int? pIsWorkingDay, int? pCreatedBy, int? pProjectID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pDayID",
                    Value = pDayID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pStartTime",
                    Value = pStartTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEndTime",
                    Value = pEndTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pIsWorkingDay",
                    Value = pIsWorkingDay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<InsertSettingDetailsResult>("EXEC @returnValue = [dbo].[InsertSettingDetails] @pDayID, @pStartTime, @pEndTime, @pIsWorkingDay, @pCreatedBy, @pProjectID, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<InsertSettingsResult>> InsertSettingsAsync(int? pSettingID, decimal? pAdditionalInWork, decimal? pAdditionalInHoliday, int? pCalculateAdditionalIfExceed, decimal? pSocialSecurityAllowanceID, int? pCalLeavesFromSalary, int? pCalLateAsAdditional, int? pDailyWorkInMinutes, int? pStartTimeINMinutes, int? pEndTimeInMinutes, int? pAllowedLate, int? pNoOfDaysBerMonth, int? pWithMorningExtra, int? pCheckoutAfterMidNight, int? pAllowedLateInLeave, int? pActiveYear, int? pDependOnCheckType, int? pCreatedBy, DateTime? pCreationDate, int? pModifiedBy, DateTime? pModificationDate, int? pAdditionalAllowanceID, int? pPersonalVacationID, string pMonthID, int? pLastCalculationDate, int? pGlobalLocal, int? pTest, int? pWithBreak, int? pbreaktime, int? pProjectID, int? pLateDeductType, decimal? pLateDeductPercentage, decimal? pCompanySharePercent, int? pBreakFrom, int? pBreakTo, int? pEarlyLeaveDeductPercentage, int? pISDynamicShift, decimal? pSocialSecurityAmount2, decimal? pCompanySharePercent2, int? pMissingCheckoutValue, int? pExtraDaysWillBeAddedToSalry, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pSettingID",
                    Value = pSettingID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pAdditionalInWork",
                    Precision = 18,
                    Scale = 5,
                    Value = pAdditionalInWork ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "pAdditionalInHoliday",
                    Precision = 18,
                    Scale = 5,
                    Value = pAdditionalInHoliday ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "pCalculateAdditionalIfExceed",
                    Value = pCalculateAdditionalIfExceed ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pSocialSecurityAllowanceID",
                    Precision = 18,
                    Scale = 3,
                    Value = pSocialSecurityAllowanceID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "pCalLeavesFromSalary",
                    Value = pCalLeavesFromSalary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCalLateAsAdditional",
                    Value = pCalLateAsAdditional ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pDailyWorkInMinutes",
                    Value = pDailyWorkInMinutes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pStartTimeINMinutes",
                    Value = pStartTimeINMinutes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEndTimeInMinutes",
                    Value = pEndTimeInMinutes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pAllowedLate",
                    Value = pAllowedLate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pNoOfDaysBerMonth",
                    Value = pNoOfDaysBerMonth ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pWithMorningExtra",
                    Value = pWithMorningExtra ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCheckoutAfterMidNight",
                    Value = pCheckoutAfterMidNight ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pAllowedLateInLeave",
                    Value = pAllowedLateInLeave ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pActiveYear",
                    Value = pActiveYear ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pDependOnCheckType",
                    Value = pDependOnCheckType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreationDate",
                    Value = pCreationDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "pModifiedBy",
                    Value = pModifiedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pModificationDate",
                    Value = pModificationDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "pAdditionalAllowanceID",
                    Value = pAdditionalAllowanceID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pPersonalVacationID",
                    Value = pPersonalVacationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pMonthID",
                    Size = 1000,
                    Value = pMonthID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pLastCalculationDate",
                    Value = pLastCalculationDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pGlobalLocal",
                    Value = pGlobalLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pTest",
                    Value = pTest ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pWithBreak",
                    Value = pWithBreak ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pbreaktime",
                    Value = pbreaktime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pLateDeductType",
                    Value = pLateDeductType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pLateDeductPercentage",
                    Precision = 18,
                    Scale = 3,
                    Value = pLateDeductPercentage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "pCompanySharePercent",
                    Precision = 18,
                    Scale = 3,
                    Value = pCompanySharePercent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "pBreakFrom",
                    Value = pBreakFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pBreakTo",
                    Value = pBreakTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEarlyLeaveDeductPercentage",
                    Value = pEarlyLeaveDeductPercentage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pISDynamicShift",
                    Value = pISDynamicShift ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pSocialSecurityAmount2",
                    Precision = 18,
                    Scale = 3,
                    Value = pSocialSecurityAmount2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "pCompanySharePercent2",
                    Precision = 18,
                    Scale = 3,
                    Value = pCompanySharePercent2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "pMissingCheckoutValue",
                    Value = pMissingCheckoutValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pExtraDaysWillBeAddedToSalry",
                    Value = pExtraDaysWillBeAddedToSalry ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<InsertSettingsResult>("EXEC @returnValue = [dbo].[InsertSettings] @pSettingID, @pAdditionalInWork, @pAdditionalInHoliday, @pCalculateAdditionalIfExceed, @pSocialSecurityAllowanceID, @pCalLeavesFromSalary, @pCalLateAsAdditional, @pDailyWorkInMinutes, @pStartTimeINMinutes, @pEndTimeInMinutes, @pAllowedLate, @pNoOfDaysBerMonth, @pWithMorningExtra, @pCheckoutAfterMidNight, @pAllowedLateInLeave, @pActiveYear, @pDependOnCheckType, @pCreatedBy, @pCreationDate, @pModifiedBy, @pModificationDate, @pAdditionalAllowanceID, @pPersonalVacationID, @pMonthID, @pLastCalculationDate, @pGlobalLocal, @pTest, @pWithBreak, @pbreaktime, @pProjectID, @pLateDeductType, @pLateDeductPercentage, @pCompanySharePercent, @pBreakFrom, @pBreakTo, @pEarlyLeaveDeductPercentage, @pISDynamicShift, @pSocialSecurityAmount2, @pCompanySharePercent2, @pMissingCheckoutValue, @pExtraDaysWillBeAddedToSalry, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<InsertShiftAllowanceResult>> InsertShiftAllowanceAsync(int? pProjectID, int? pShiftID, int? pAllowanceID, int? pStartDate, int? pEndDate, int? pStatusID, int? pCreatedBy, OutputParameter<int?> pError, OutputParameter<int?> pAllowanceShiftID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterpAllowanceShiftID = new SqlParameter
            {
                ParameterName = "pAllowanceShiftID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pAllowanceShiftID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pShiftID",
                    Value = pShiftID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pAllowanceID",
                    Value = pAllowanceID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pStartDate",
                    Value = pStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEndDate",
                    Value = pEndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pStatusID",
                    Value = pStatusID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterpAllowanceShiftID,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<InsertShiftAllowanceResult>("EXEC @returnValue = [dbo].[InsertShiftAllowance] @pProjectID, @pShiftID, @pAllowanceID, @pStartDate, @pEndDate, @pStatusID, @pCreatedBy, @pError OUTPUT, @pAllowanceShiftID OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            pAllowanceShiftID.SetValue(parameterpAllowanceShiftID.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> InsertShiftDetailsAsync(int? pShiftID, int? pDayID, int? pStartTime, int? pEndTime, int? pIsWorkingDay, int? pCreatedBy, int? pIsCalculated, int? pProjectID, int? pBreakDay, int? pBreakEndTime, int? pBreakStartTime, int? pRamadanDay, int? pRamadanStartTime, int? pRamadanEndTime, int? pRamadanStartTimeRest, int? pRamadanEndTimeRest, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pShiftID",
                    Value = pShiftID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pDayID",
                    Value = pDayID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pStartTime",
                    Value = pStartTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEndTime",
                    Value = pEndTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pIsWorkingDay",
                    Value = pIsWorkingDay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pIsCalculated",
                    Value = pIsCalculated ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pBreakDay",
                    Value = pBreakDay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pBreakEndTime",
                    Value = pBreakEndTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pBreakStartTime",
                    Value = pBreakStartTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pRamadanDay",
                    Value = pRamadanDay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pRamadanStartTime",
                    Value = pRamadanStartTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pRamadanEndTime",
                    Value = pRamadanEndTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pRamadanStartTimeRest",
                    Value = pRamadanStartTimeRest ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pRamadanEndTimeRest",
                    Value = pRamadanEndTimeRest ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[InsertShiftDetails] @pShiftID, @pDayID, @pStartTime, @pEndTime, @pIsWorkingDay, @pCreatedBy, @pIsCalculated, @pProjectID, @pBreakDay, @pBreakEndTime, @pBreakStartTime, @pRamadanDay, @pRamadanStartTime, @pRamadanEndTime, @pRamadanStartTimeRest, @pRamadanEndTimeRest, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> InsertTemplateAsync(string pTableName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pTableName",
                    Size = 250,
                    Value = pTableName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[InsertTemplate] @pTableName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> InsertUsersAsync(string pUserName, string pUserPassword, int? pProjectID, int? pFromOtherProcedure, OutputParameter<int?> pUserID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpUserID = new SqlParameter
            {
                ParameterName = "pUserID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pUserID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterpUserID,
                new SqlParameter
                {
                    ParameterName = "pUserName",
                    Size = 50,
                    Value = pUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pUserPassword",
                    Size = 50,
                    Value = pUserPassword ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                new SqlParameter
                {
                    ParameterName = "pFromOtherProcedure",
                    Value = pFromOtherProcedure ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[InsertUsers] @pUserID OUTPUT, @pUserName, @pUserPassword, @pProjectID, @pError OUTPUT, @pFromOtherProcedure", sqlParameters, cancellationToken);

            pUserID.SetValue(parameterpUserID.Value);
            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Online_GetprojectsResult>> Online_GetprojectsAsync(string pvalidateid, string pValidateType, int? pStatusID, int? pProjectID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pvalidateid",
                    Size = 1000,
                    Value = pvalidateid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pValidateType",
                    Size = 1000,
                    Value = pValidateType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pStatusID",
                    Value = pStatusID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Online_GetprojectsResult>("EXEC @returnValue = [dbo].[Online_Getprojects] @pvalidateid, @pValidateType, @pStatusID, @pProjectID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Online_InsertprojectsAsync(string pProjectName, byte[] pProjectLogo, int? pStatusid, string pTypeDesc, string pvalidatetype, string pvalidateid, DateTime? pvalidateperidFrom, DateTime? pvalidateperiodto, string pCreatedby, DateTime? pcreationdate, string pacceptedby, DateTime? paccepteddate, OutputParameter<int?> pProjectId, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpProjectId = new SqlParameter
            {
                ParameterName = "pProjectId",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pProjectId?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterpProjectId,
                new SqlParameter
                {
                    ParameterName = "pProjectName",
                    Size = 5000,
                    Value = pProjectName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectLogo",
                    Size = -1,
                    Value = pProjectLogo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarBinary,
                },
                new SqlParameter
                {
                    ParameterName = "pStatusid",
                    Value = pStatusid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pTypeDesc",
                    Size = 100,
                    Value = pTypeDesc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pvalidatetype",
                    Size = 100,
                    Value = pvalidatetype ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pvalidateid",
                    Size = 1000,
                    Value = pvalidateid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pvalidateperidFrom",
                    Value = pvalidateperidFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "pvalidateperiodto",
                    Value = pvalidateperiodto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedby",
                    Size = 100,
                    Value = pCreatedby ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pcreationdate",
                    Value = pcreationdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "pacceptedby",
                    Size = 100,
                    Value = pacceptedby ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "paccepteddate",
                    Value = paccepteddate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Online_Insertprojects] @pProjectId OUTPUT, @pProjectName, @pProjectLogo, @pStatusid, @pTypeDesc, @pvalidatetype, @pvalidateid, @pvalidateperidFrom, @pvalidateperiodto, @pCreatedby, @pcreationdate, @pacceptedby, @paccepteddate, @pError OUTPUT", sqlParameters, cancellationToken);

            pProjectId.SetValue(parameterpProjectId.Value);
            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Online_SaveprojectsResult>> Online_SaveprojectsAsync(string pProjectName, byte[] pProjectLogo, int? pStatusid, string pTypeDesc, string pvalidatetype, string pvalidateid, DateTime? pvalidateperidFrom, DateTime? pvalidateperiodto, string pCreatedby, DateTime? pcreationdate, string pacceptedby, DateTime? paccepteddate, string pUserPassword, string pFooterTitle1, int? pDependOnCheckType, int? pTypeID, string pNewUserName, string pEmail, string pPhone, string pPassword, int? pProjectIdFromOnline, OutputParameter<int?> pProjectId, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpProjectId = new SqlParameter
            {
                ParameterName = "pProjectId",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pProjectId?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterpProjectId,
                new SqlParameter
                {
                    ParameterName = "pProjectName",
                    Size = 5000,
                    Value = pProjectName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectLogo",
                    Size = -1,
                    Value = pProjectLogo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarBinary,
                },
                new SqlParameter
                {
                    ParameterName = "pStatusid",
                    Value = pStatusid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pTypeDesc",
                    Size = 100,
                    Value = pTypeDesc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pvalidatetype",
                    Size = 100,
                    Value = pvalidatetype ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pvalidateid",
                    Size = 1000,
                    Value = pvalidateid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pvalidateperidFrom",
                    Value = pvalidateperidFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "pvalidateperiodto",
                    Value = pvalidateperiodto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedby",
                    Size = 100,
                    Value = pCreatedby ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pcreationdate",
                    Value = pcreationdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "pacceptedby",
                    Size = 100,
                    Value = pacceptedby ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "paccepteddate",
                    Value = paccepteddate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterpError,
                new SqlParameter
                {
                    ParameterName = "pUserPassword",
                    Size = 50,
                    Value = pUserPassword ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pFooterTitle1",
                    Size = 1000,
                    Value = pFooterTitle1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pDependOnCheckType",
                    Value = pDependOnCheckType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pTypeID",
                    Value = pTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pNewUserName",
                    Size = 100,
                    Value = pNewUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pEmail",
                    Size = 100,
                    Value = pEmail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pPhone",
                    Size = 100,
                    Value = pPhone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pPassword",
                    Size = 100,
                    Value = pPassword ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectIdFromOnline",
                    Value = pProjectIdFromOnline ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Online_SaveprojectsResult>("EXEC @returnValue = [dbo].[Online_Saveprojects] @pProjectId OUTPUT, @pProjectName, @pProjectLogo, @pStatusid, @pTypeDesc, @pvalidatetype, @pvalidateid, @pvalidateperidFrom, @pvalidateperiodto, @pCreatedby, @pcreationdate, @pacceptedby, @paccepteddate, @pError OUTPUT, @pUserPassword, @pFooterTitle1, @pDependOnCheckType, @pTypeID, @pNewUserName, @pEmail, @pPhone, @pPassword, @pProjectIdFromOnline", sqlParameters, cancellationToken);

            pProjectId.SetValue(parameterpProjectId.Value);
            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Online_UpdateImageAsync(byte[] pImagePath, string pValidateID, int? pProjectID, string pImageName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pImagePath",
                    Size = -1,
                    Value = pImagePath ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarBinary,
                },
                new SqlParameter
                {
                    ParameterName = "pValidateID",
                    Size = 500,
                    Value = pValidateID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pImageName",
                    Size = 1000,
                    Value = pImageName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Online_UpdateImage] @pImagePath, @pValidateID, @pProjectID, @pImageName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<RefreshEmployeeAttendanceResult>> RefreshEmployeeAttendanceAsync(int? pAgain, int? pEmployeeID, int? pProjectID, int? pCheckIn, int? pCheckOut, int? pAttendanceDate, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pAgain",
                    Value = pAgain ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                new SqlParameter
                {
                    ParameterName = "pCheckIn",
                    Value = pCheckIn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCheckOut",
                    Value = pCheckOut ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pAttendanceDate",
                    Value = pAttendanceDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<RefreshEmployeeAttendanceResult>("EXEC @returnValue = [dbo].[RefreshEmployeeAttendance] @pAgain, @pEmployeeID, @pProjectID, @pError OUTPUT, @pCheckIn, @pCheckOut, @pAttendanceDate", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<RefreshEmployeeAttendanceTest20221107Result>> RefreshEmployeeAttendanceTest20221107Async(int? pAgain, int? pEmployeeID, int? pProjectID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pAgain",
                    Value = pAgain ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<RefreshEmployeeAttendanceTest20221107Result>("EXEC @returnValue = [dbo].[RefreshEmployeeAttendanceTest20221107] @pAgain, @pEmployeeID, @pProjectID, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SaveAllowance_DeductionResult>> SaveAllowance_DeductionAsync(string pDefaultDesc, int? pTypeID, decimal? pAmount, int? pCalculateTypeID, int? pNatureID, int? pIsDefault, int? pCreatedBy, int? pProjectID, int? pCalculateWithOvertime, int? pCalculateWithAttendanceDeduction, OutputParameter<int?> pAllowanceID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpAllowanceID = new SqlParameter
            {
                ParameterName = "pAllowanceID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pAllowanceID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterpAllowanceID,
                new SqlParameter
                {
                    ParameterName = "pDefaultDesc",
                    Size = 100,
                    Value = pDefaultDesc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pTypeID",
                    Value = pTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pAmount",
                    Precision = 18,
                    Scale = 3,
                    Value = pAmount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "pCalculateTypeID",
                    Value = pCalculateTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pNatureID",
                    Value = pNatureID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pIsDefault",
                    Value = pIsDefault ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                new SqlParameter
                {
                    ParameterName = "pCalculateWithOvertime",
                    Value = pCalculateWithOvertime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCalculateWithAttendanceDeduction",
                    Value = pCalculateWithAttendanceDeduction ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SaveAllowance_DeductionResult>("EXEC @returnValue = [dbo].[SaveAllowance_Deduction] @pAllowanceID OUTPUT, @pDefaultDesc, @pTypeID, @pAmount, @pCalculateTypeID, @pNatureID, @pIsDefault, @pCreatedBy, @pProjectID, @pError OUTPUT, @pCalculateWithOvertime, @pCalculateWithAttendanceDeduction", sqlParameters, cancellationToken);

            pAllowanceID.SetValue(parameterpAllowanceID.Value);
            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SaveAttendanceAsync(string pstuTime, string pszUserID, string pemAttendanceState, int? pmaxLogID, string pMaxLogDate, int? pProjectID, string pUserIDs, string pInOutModes, string pYears, string pMonths, string pDays, string pHours, string pMinutes, int? pFlag, string pIP, string pPort, OutputParameter<string> pRecno, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpRecno = new SqlParameter
            {
                ParameterName = "pRecno",
                Size = 4000,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pRecno?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterpRecno,
                new SqlParameter
                {
                    ParameterName = "pstuTime",
                    Size = 4000,
                    Value = pstuTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pszUserID",
                    Size = 4000,
                    Value = pszUserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pemAttendanceState",
                    Size = 4000,
                    Value = pemAttendanceState ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pmaxLogID",
                    Value = pmaxLogID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pMaxLogDate",
                    Size = 4000,
                    Value = pMaxLogDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                new SqlParameter
                {
                    ParameterName = "pUserIDs",
                    Size = 4000,
                    Value = pUserIDs ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pInOutModes",
                    Size = 4000,
                    Value = pInOutModes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pYears",
                    Size = 4000,
                    Value = pYears ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pMonths",
                    Size = 4000,
                    Value = pMonths ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pDays",
                    Size = 4000,
                    Value = pDays ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pHours",
                    Size = 4000,
                    Value = pHours ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pMinutes",
                    Size = 4000,
                    Value = pMinutes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pFlag",
                    Value = pFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pIP",
                    Size = 100,
                    Value = pIP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pPort",
                    Size = 50,
                    Value = pPort ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SaveAttendance] @pRecno OUTPUT, @pstuTime, @pszUserID, @pemAttendanceState, @pmaxLogID, @pMaxLogDate, @pProjectID, @pError OUTPUT, @pUserIDs, @pInOutModes, @pYears, @pMonths, @pDays, @pHours, @pMinutes, @pFlag, @pIP, @pPort", sqlParameters, cancellationToken);

            pRecno.SetValue(parameterpRecno.Value);
            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SaveEmployeeAdditionalInfoAsync(int? pStatusID, int? pSettingID, int? pCreatedBy, string pNationalId, string pSocialNumber, string pCareerNumber, string pJobTitleName, int? pBirthDate, int? pGenderID, int? pNationalityID, string pMobileNo, string pEmailNo, int? pMaritalStatusID, string pEmergencyCallName, string pEmergencyCallMobile, string pAccountNo, string pIBAN, int? pBankID, int? pBranchID, string pEmployeeImage, int? pProjectID, int? pHasBreak, int? pStartDate, int? pDepartmentID, string pUserName, string pPassword, int? pSSNType, int? pIsDynamicShift, int? pReligionID, int? pFamilyCount, string pPermitNo, int? pPermitEndDate, OutputParameter<int?> pEmployeeID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpEmployeeID = new SqlParameter
            {
                ParameterName = "pEmployeeID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pEmployeeID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterpEmployeeID,
                new SqlParameter
                {
                    ParameterName = "pStatusID",
                    Value = pStatusID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pSettingID",
                    Value = pSettingID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pNationalId",
                    Size = 100,
                    Value = pNationalId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pSocialNumber",
                    Size = 50,
                    Value = pSocialNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pCareerNumber",
                    Size = 50,
                    Value = pCareerNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pJobTitleName",
                    Size = 50,
                    Value = pJobTitleName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pBirthDate",
                    Value = pBirthDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pGenderID",
                    Value = pGenderID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pNationalityID",
                    Value = pNationalityID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pMobileNo",
                    Size = 50,
                    Value = pMobileNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pEmailNo",
                    Size = 50,
                    Value = pEmailNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pMaritalStatusID",
                    Value = pMaritalStatusID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmergencyCallName",
                    Size = 1000,
                    Value = pEmergencyCallName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pEmergencyCallMobile",
                    Size = 50,
                    Value = pEmergencyCallMobile ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pAccountNo",
                    Size = 100,
                    Value = pAccountNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pIBAN",
                    Size = 100,
                    Value = pIBAN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pBankID",
                    Value = pBankID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pBranchID",
                    Value = pBranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeImage",
                    Size = 1000,
                    Value = pEmployeeImage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pHasBreak",
                    Value = pHasBreak ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pStartDate",
                    Value = pStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pDepartmentID",
                    Value = pDepartmentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pUserName",
                    Size = 50,
                    Value = pUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pPassword",
                    Size = 50,
                    Value = pPassword ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pSSNType",
                    Value = pSSNType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pIsDynamicShift",
                    Value = pIsDynamicShift ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                new SqlParameter
                {
                    ParameterName = "pReligionID",
                    Value = pReligionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFamilyCount",
                    Value = pFamilyCount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pPermitNo",
                    Size = 100,
                    Value = pPermitNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pPermitEndDate",
                    Value = pPermitEndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SaveEmployeeAdditionalInfo] @pEmployeeID OUTPUT, @pStatusID, @pSettingID, @pCreatedBy, @pNationalId, @pSocialNumber, @pCareerNumber, @pJobTitleName, @pBirthDate, @pGenderID, @pNationalityID, @pMobileNo, @pEmailNo, @pMaritalStatusID, @pEmergencyCallName, @pEmergencyCallMobile, @pAccountNo, @pIBAN, @pBankID, @pBranchID, @pEmployeeImage, @pProjectID, @pHasBreak, @pStartDate, @pDepartmentID, @pUserName, @pPassword, @pSSNType, @pIsDynamicShift, @pError OUTPUT, @pReligionID, @pFamilyCount, @pPermitNo, @pPermitEndDate", sqlParameters, cancellationToken);

            pEmployeeID.SetValue(parameterpEmployeeID.Value);
            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SaveEmployeeAllowancesResult>> SaveEmployeeAllowancesAsync(int? pEmployeeID, int? pStartDate, int? pEndDate, int? pAllowanceID, int? pCreatedBy, int? pProjectID, decimal? pAmount, int? pCalculatedWithOverTime, OutputParameter<int?> pEmployeeAllowanceID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpEmployeeAllowanceID = new SqlParameter
            {
                ParameterName = "pEmployeeAllowanceID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pEmployeeAllowanceID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterpEmployeeAllowanceID,
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pStartDate",
                    Value = pStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEndDate",
                    Value = pEndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pAllowanceID",
                    Value = pAllowanceID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pAmount",
                    Precision = 18,
                    Scale = 3,
                    Value = pAmount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "pCalculatedWithOverTime",
                    Value = pCalculatedWithOverTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SaveEmployeeAllowancesResult>("EXEC @returnValue = [dbo].[SaveEmployeeAllowances] @pEmployeeAllowanceID OUTPUT, @pEmployeeID, @pStartDate, @pEndDate, @pAllowanceID, @pCreatedBy, @pProjectID, @pAmount, @pCalculatedWithOverTime, @pError OUTPUT", sqlParameters, cancellationToken);

            pEmployeeAllowanceID.SetValue(parameterpEmployeeAllowanceID.Value);
            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SaveEmployeeContractsAsync(int? pContractTypeID, int? pProjectID, int? pEmployeeID, int? pStatusID, int? pCreatedBy, decimal? pContractEndDate, int? pContractConfirmDate, int? pContractFromDate, int? pContractStartDate, int? pCompanyID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pContractTypeID",
                    Value = pContractTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pStatusID",
                    Value = pStatusID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pContractEndDate",
                    Precision = 18,
                    Scale = 5,
                    Value = pContractEndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "pContractConfirmDate",
                    Value = pContractConfirmDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pContractFromDate",
                    Value = pContractFromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pContractStartDate",
                    Value = pContractStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCompanyID",
                    Value = pCompanyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SaveEmployeeContracts] @pContractTypeID, @pProjectID, @pEmployeeID, @pStatusID, @pCreatedBy, @pContractEndDate, @pContractConfirmDate, @pContractFromDate, @pContractStartDate, @pCompanyID, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SaveEmployeeDeductionsAsync(int? pEmployeeID, int? pStartDate, int? pEndDate, int? pDeductionID, int? pCreatedBy, int? pProjectID, decimal? pAmount, OutputParameter<int?> pEmployeeDeductionID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpEmployeeDeductionID = new SqlParameter
            {
                ParameterName = "pEmployeeDeductionID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pEmployeeDeductionID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterpEmployeeDeductionID,
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pStartDate",
                    Value = pStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEndDate",
                    Value = pEndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pDeductionID",
                    Value = pDeductionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pAmount",
                    Precision = 18,
                    Scale = 3,
                    Value = pAmount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SaveEmployeeDeductions] @pEmployeeDeductionID OUTPUT, @pEmployeeID, @pStartDate, @pEndDate, @pDeductionID, @pCreatedBy, @pProjectID, @pAmount, @pError OUTPUT", sqlParameters, cancellationToken);

            pEmployeeDeductionID.SetValue(parameterpEmployeeDeductionID.Value);
            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SaveEmployeeFromDeviceResult>> SaveEmployeeFromDeviceAsync(string pstuName, string pszUserID, int? pProjectID, OutputParameter<string> pRecno, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpRecno = new SqlParameter
            {
                ParameterName = "pRecno",
                Size = 4000,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pRecno?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterpRecno,
                new SqlParameter
                {
                    ParameterName = "pstuName",
                    Size = 4000,
                    Value = pstuName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pszUserID",
                    Size = 4000,
                    Value = pszUserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SaveEmployeeFromDeviceResult>("EXEC @returnValue = [dbo].[SaveEmployeeFromDevice] @pRecno OUTPUT, @pstuName, @pszUserID, @pProjectID, @pError OUTPUT", sqlParameters, cancellationToken);

            pRecno.SetValue(parameterpRecno.Value);
            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SaveEmployeeGeneralInfoResult>> SaveEmployeeGeneralInfoAsync(string pEmployeeName, string pEmployeeNumber, int? pStatusID, int? pSettingID, int? pCreatedBy, int? pNationalId, string pSocialNumber, string pCareerNumber, string pJobTitleName, int? pBirthDate, int? pGenderID, int? pNationalityID, string pMobileNo, string pEmailNo, int? pMaritalStatusID, string pEmergencyCallName, string pEmergencyCallMobile, string pAccountNo, string pIBAN, int? pBankID, int? pBranchID, string pEmployeeImage, int? pProjectID, int? pHasBreak, int? pContractID, int? pStartDate, int? pEndDate, decimal? pSalary, decimal? pSocialSecuritySalary, int? pCurrentBalance, int? pPreviousBalance, int? pActualBalance, OutputParameter<int?> pEmployeeID, OutputParameter<int?> pYearID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpEmployeeID = new SqlParameter
            {
                ParameterName = "pEmployeeID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pEmployeeID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterpYearID = new SqlParameter
            {
                ParameterName = "pYearID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pYearID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterpEmployeeID,
                new SqlParameter
                {
                    ParameterName = "pEmployeeName",
                    Size = 1000,
                    Value = pEmployeeName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeNumber",
                    Size = 50,
                    Value = pEmployeeNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pStatusID",
                    Value = pStatusID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pSettingID",
                    Value = pSettingID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pNationalId",
                    Value = pNationalId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pSocialNumber",
                    Size = 50,
                    Value = pSocialNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pCareerNumber",
                    Size = 50,
                    Value = pCareerNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pJobTitleName",
                    Size = 50,
                    Value = pJobTitleName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pBirthDate",
                    Value = pBirthDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pGenderID",
                    Value = pGenderID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pNationalityID",
                    Value = pNationalityID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pMobileNo",
                    Size = 50,
                    Value = pMobileNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pEmailNo",
                    Size = 50,
                    Value = pEmailNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pMaritalStatusID",
                    Value = pMaritalStatusID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmergencyCallName",
                    Size = 1000,
                    Value = pEmergencyCallName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pEmergencyCallMobile",
                    Size = 50,
                    Value = pEmergencyCallMobile ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pAccountNo",
                    Size = 100,
                    Value = pAccountNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pIBAN",
                    Size = 100,
                    Value = pIBAN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pBankID",
                    Value = pBankID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pBranchID",
                    Value = pBranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeImage",
                    Size = 1000,
                    Value = pEmployeeImage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pHasBreak",
                    Value = pHasBreak ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pContractID",
                    Value = pContractID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pStartDate",
                    Value = pStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEndDate",
                    Value = pEndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pSalary",
                    Precision = 18,
                    Scale = 5,
                    Value = pSalary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "pSocialSecuritySalary",
                    Precision = 18,
                    Scale = 5,
                    Value = pSocialSecuritySalary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterpYearID,
                new SqlParameter
                {
                    ParameterName = "pCurrentBalance",
                    Value = pCurrentBalance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pPreviousBalance",
                    Value = pPreviousBalance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pActualBalance",
                    Value = pActualBalance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SaveEmployeeGeneralInfoResult>("EXEC @returnValue = [dbo].[SaveEmployeeGeneralInfo] @pEmployeeID OUTPUT, @pEmployeeName, @pEmployeeNumber, @pStatusID, @pSettingID, @pCreatedBy, @pNationalId, @pSocialNumber, @pCareerNumber, @pJobTitleName, @pBirthDate, @pGenderID, @pNationalityID, @pMobileNo, @pEmailNo, @pMaritalStatusID, @pEmergencyCallName, @pEmergencyCallMobile, @pAccountNo, @pIBAN, @pBankID, @pBranchID, @pEmployeeImage, @pProjectID, @pHasBreak, @pContractID, @pStartDate, @pEndDate, @pSalary, @pSocialSecuritySalary, @pYearID OUTPUT, @pCurrentBalance, @pPreviousBalance, @pActualBalance, @pError OUTPUT", sqlParameters, cancellationToken);

            pEmployeeID.SetValue(parameterpEmployeeID.Value);
            pYearID.SetValue(parameterpYearID.Value);
            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SaveEmployeeGroupsAsync(int? pEmployeeID, int? pGroupID, int? pCreatedBy, int? pProjectID, OutputParameter<int?> pEmployeeGroupID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpEmployeeGroupID = new SqlParameter
            {
                ParameterName = "pEmployeeGroupID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pEmployeeGroupID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterpEmployeeGroupID,
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pGroupID",
                    Value = pGroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SaveEmployeeGroups] @pEmployeeGroupID OUTPUT, @pEmployeeID, @pGroupID, @pCreatedBy, @pProjectID, @pError OUTPUT", sqlParameters, cancellationToken);

            pEmployeeGroupID.SetValue(parameterpEmployeeGroupID.Value);
            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SaveEmployeeHRServiceAsync(int? pEmployeeHRServiceID, int? pEmployeeID, int? pHRServiceID, int? pMonthID, int? pHRServiceDate, string pReasonDesc, int? pCreatedBy, int? pStatusID, int? pYearID, int? pBankID, int? pBranchID, string pServiceText, string pAttachmentDesc, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeHRServiceID",
                    Value = pEmployeeHRServiceID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pHRServiceID",
                    Value = pHRServiceID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pMonthID",
                    Value = pMonthID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pHRServiceDate",
                    Value = pHRServiceDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pReasonDesc",
                    Size = 4000,
                    Value = pReasonDesc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pStatusID",
                    Value = pStatusID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pYearID",
                    Value = pYearID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pBankID",
                    Value = pBankID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pBranchID",
                    Value = pBranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pServiceText",
                    Size = 1000,
                    Value = pServiceText ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pAttachmentDesc",
                    Size = 1000,
                    Value = pAttachmentDesc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SaveEmployeeHRService] @pEmployeeHRServiceID, @pEmployeeID, @pHRServiceID, @pMonthID, @pHRServiceDate, @pReasonDesc, @pCreatedBy, @pStatusID, @pYearID, @pBankID, @pBranchID, @pServiceText, @pAttachmentDesc, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SaveEmployeeInjuryAsync(int? pEmployeeInjuryID, int? pEmployeeID, int? pInjuryID, int? pDayCount, int? pInjuryDate, string pReasonDesc, int? pCreatedBy, int? pStatusID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeInjuryID",
                    Value = pEmployeeInjuryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pInjuryID",
                    Value = pInjuryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pDayCount",
                    Value = pDayCount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pInjuryDate",
                    Value = pInjuryDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pReasonDesc",
                    Size = 4000,
                    Value = pReasonDesc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pStatusID",
                    Value = pStatusID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SaveEmployeeInjury] @pEmployeeInjuryID, @pEmployeeID, @pInjuryID, @pDayCount, @pInjuryDate, @pReasonDesc, @pCreatedBy, @pStatusID, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SaveEmployeeLeavesResult>> SaveEmployeeLeavesAsync(int? pEmployeeID, int? pLeaveTypeID, int? pLeaveDate, int? pFromTime, int? pToTime, int? pCreatedBy, int? pBySystem, int? pProjectID, int? pPrevilageType, OutputParameter<int?> pEmployeeLeaveID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpEmployeeLeaveID = new SqlParameter
            {
                ParameterName = "pEmployeeLeaveID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pEmployeeLeaveID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterpEmployeeLeaveID,
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pLeaveTypeID",
                    Value = pLeaveTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pLeaveDate",
                    Value = pLeaveDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFromTime",
                    Value = pFromTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pToTime",
                    Value = pToTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pBySystem",
                    Value = pBySystem ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pPrevilageType",
                    Value = pPrevilageType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SaveEmployeeLeavesResult>("EXEC @returnValue = [dbo].[SaveEmployeeLeaves] @pEmployeeLeaveID OUTPUT, @pEmployeeID, @pLeaveTypeID, @pLeaveDate, @pFromTime, @pToTime, @pCreatedBy, @pBySystem, @pProjectID, @pPrevilageType, @pError OUTPUT", sqlParameters, cancellationToken);

            pEmployeeLeaveID.SetValue(parameterpEmployeeLeaveID.Value);
            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SaveEmployeeLoanResult>> SaveEmployeeLoanAsync(int? pEmployeeID, int? pLoanDate, decimal? pLoanAmount, string pNotes, int? pCreatedBy, int? pProjectID, int? ploantypeid, int? pPrevilageType, OutputParameter<int?> pEmployeeLoanID, OutputParameter<int?> pError, OutputParameter<int?> pLoanSerial, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpEmployeeLoanID = new SqlParameter
            {
                ParameterName = "pEmployeeLoanID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pEmployeeLoanID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterpLoanSerial = new SqlParameter
            {
                ParameterName = "pLoanSerial",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pLoanSerial?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterpEmployeeLoanID,
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pLoanDate",
                    Value = pLoanDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pLoanAmount",
                    Precision = 18,
                    Scale = 5,
                    Value = pLoanAmount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "pNotes",
                    Size = 200,
                    Value = pNotes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                new SqlParameter
                {
                    ParameterName = "ploantypeid",
                    Value = ploantypeid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pPrevilageType",
                    Value = pPrevilageType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpLoanSerial,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SaveEmployeeLoanResult>("EXEC @returnValue = [dbo].[SaveEmployeeLoan] @pEmployeeLoanID OUTPUT, @pEmployeeID, @pLoanDate, @pLoanAmount, @pNotes, @pCreatedBy, @pProjectID, @pError OUTPUT, @ploantypeid, @pPrevilageType, @pLoanSerial OUTPUT", sqlParameters, cancellationToken);

            pEmployeeLoanID.SetValue(parameterpEmployeeLoanID.Value);
            pError.SetValue(parameterpError.Value);
            pLoanSerial.SetValue(parameterpLoanSerial.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SaveEmployeeOvertimeAsync(int? pEmployeeID, int? pAttendanceDate, int? pTotalHours, string pNotes, int? pCreatedBy, int? pProjectID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pAttendanceDate",
                    Value = pAttendanceDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pTotalHours",
                    Value = pTotalHours ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pNotes",
                    Size = 200,
                    Value = pNotes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SaveEmployeeOvertime] @pEmployeeID, @pAttendanceDate, @pTotalHours, @pNotes, @pCreatedBy, @pProjectID, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SaveEmployeePenaltyAsync(int? pEmployeePenaltyID, int? pEmployeeID, int? pPenaltyID, int? pDayCount, int? pPenaltyDate, string pReasonDesc, int? pCreatedBy, int? pStatusID, int? pAppliedPenaltyCategoryTypeID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeePenaltyID",
                    Value = pEmployeePenaltyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pPenaltyID",
                    Value = pPenaltyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pDayCount",
                    Value = pDayCount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pPenaltyDate",
                    Value = pPenaltyDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pReasonDesc",
                    Size = 4000,
                    Value = pReasonDesc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pStatusID",
                    Value = pStatusID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pAppliedPenaltyCategoryTypeID",
                    Value = pAppliedPenaltyCategoryTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SaveEmployeePenalty] @pEmployeePenaltyID, @pEmployeeID, @pPenaltyID, @pDayCount, @pPenaltyDate, @pReasonDesc, @pCreatedBy, @pStatusID, @pAppliedPenaltyCategoryTypeID, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SaveEmployeeShiftsResult>> SaveEmployeeShiftsAsync(int? pEmployeeID, int? pShiftID, int? pFromDate, int? pToDate, int? pCreatedBy, int? pProjectID, int? pIsCalledFromOtherSP, OutputParameter<int?> pEmployeeShiftID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpEmployeeShiftID = new SqlParameter
            {
                ParameterName = "pEmployeeShiftID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pEmployeeShiftID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterpEmployeeShiftID,
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pShiftID",
                    Value = pShiftID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFromDate",
                    Value = pFromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pToDate",
                    Value = pToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pIsCalledFromOtherSP",
                    Value = pIsCalledFromOtherSP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SaveEmployeeShiftsResult>("EXEC @returnValue = [dbo].[SaveEmployeeShifts] @pEmployeeShiftID OUTPUT, @pEmployeeID, @pShiftID, @pFromDate, @pToDate, @pCreatedBy, @pProjectID, @pIsCalledFromOtherSP, @pError OUTPUT", sqlParameters, cancellationToken);

            pEmployeeShiftID.SetValue(parameterpEmployeeShiftID.Value);
            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SaveEmployeeTransactionResult>> SaveEmployeeTransactionAsync(int? pEmployeeID, int? pTransactionDate, int? pTransactionTypeID, int? pTransactionInMinutes, string pNotes, int? pCreatedBy, int? pBySystem, int? pRelatedToDate, int? pProjectID, OutputParameter<int?> pEmployeeTransactionID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpEmployeeTransactionID = new SqlParameter
            {
                ParameterName = "pEmployeeTransactionID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pEmployeeTransactionID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterpEmployeeTransactionID,
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pTransactionDate",
                    Value = pTransactionDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pTransactionTypeID",
                    Value = pTransactionTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pTransactionInMinutes",
                    Value = pTransactionInMinutes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pNotes",
                    Size = 100,
                    Value = pNotes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pBySystem",
                    Value = pBySystem ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pRelatedToDate",
                    Value = pRelatedToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SaveEmployeeTransactionResult>("EXEC @returnValue = [dbo].[SaveEmployeeTransaction] @pEmployeeTransactionID OUTPUT, @pEmployeeID, @pTransactionDate, @pTransactionTypeID, @pTransactionInMinutes, @pNotes, @pCreatedBy, @pBySystem, @pRelatedToDate, @pProjectID, @pError OUTPUT", sqlParameters, cancellationToken);

            pEmployeeTransactionID.SetValue(parameterpEmployeeTransactionID.Value);
            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SaveEmployeeTransactionAutoResult>> SaveEmployeeTransactionAutoAsync(int? pEmployeeID, int? pTransactionDate, int? pTransactionTypeID, int? pTransactionInMinutes, string pNotes, int? pCreatedBy, int? pBySystem, int? pRelatedToDate, int? pProjectID, OutputParameter<int?> pEmployeeTransactionID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpEmployeeTransactionID = new SqlParameter
            {
                ParameterName = "pEmployeeTransactionID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pEmployeeTransactionID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterpEmployeeTransactionID,
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pTransactionDate",
                    Value = pTransactionDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pTransactionTypeID",
                    Value = pTransactionTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pTransactionInMinutes",
                    Value = pTransactionInMinutes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pNotes",
                    Size = 100,
                    Value = pNotes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pBySystem",
                    Value = pBySystem ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pRelatedToDate",
                    Value = pRelatedToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SaveEmployeeTransactionAutoResult>("EXEC @returnValue = [dbo].[SaveEmployeeTransactionAuto] @pEmployeeTransactionID OUTPUT, @pEmployeeID, @pTransactionDate, @pTransactionTypeID, @pTransactionInMinutes, @pNotes, @pCreatedBy, @pBySystem, @pRelatedToDate, @pProjectID, @pError OUTPUT", sqlParameters, cancellationToken);

            pEmployeeTransactionID.SetValue(parameterpEmployeeTransactionID.Value);
            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SaveEmployeeVacationResult>> SaveEmployeeVacationAsync(int? pEmployeeID, int? pVacationTypeID, int? pFromDate, int? pToDate, string pNotes, int? pDayCount, int? pCreatedBy, int? pProjectID, int? pIsCalledFromOtherSP, int? pPrevilageType, OutputParameter<int?> pEmployeeVacationID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpEmployeeVacationID = new SqlParameter
            {
                ParameterName = "pEmployeeVacationID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pEmployeeVacationID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterpEmployeeVacationID,
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pVacationTypeID",
                    Value = pVacationTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFromDate",
                    Value = pFromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pToDate",
                    Value = pToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pNotes",
                    Size = 1000,
                    Value = pNotes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pDayCount",
                    Value = pDayCount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pIsCalledFromOtherSP",
                    Value = pIsCalledFromOtherSP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pPrevilageType",
                    Value = pPrevilageType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SaveEmployeeVacationResult>("EXEC @returnValue = [dbo].[SaveEmployeeVacation] @pEmployeeVacationID OUTPUT, @pEmployeeID, @pVacationTypeID, @pFromDate, @pToDate, @pNotes, @pDayCount, @pCreatedBy, @pProjectID, @pIsCalledFromOtherSP, @pPrevilageType, @pError OUTPUT", sqlParameters, cancellationToken);

            pEmployeeVacationID.SetValue(parameterpEmployeeVacationID.Value);
            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SaveEmployeeVacationScheduleResult>> SaveEmployeeVacationScheduleAsync(int? pEmployeeID, int? pVacationTypeID, int? pFromDate, int? pToDate, string pNotes, int? pDayCount, int? pCreatedBy, int? pProjectID, int? pIsCalledFromOtherSP, int? pPrevilageType, OutputParameter<int?> pEmployeeVacationID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpEmployeeVacationID = new SqlParameter
            {
                ParameterName = "pEmployeeVacationID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pEmployeeVacationID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterpEmployeeVacationID,
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pVacationTypeID",
                    Value = pVacationTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFromDate",
                    Value = pFromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pToDate",
                    Value = pToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pNotes",
                    Size = 1000,
                    Value = pNotes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pDayCount",
                    Value = pDayCount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pIsCalledFromOtherSP",
                    Value = pIsCalledFromOtherSP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pPrevilageType",
                    Value = pPrevilageType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SaveEmployeeVacationScheduleResult>("EXEC @returnValue = [dbo].[SaveEmployeeVacationSchedule] @pEmployeeVacationID OUTPUT, @pEmployeeID, @pVacationTypeID, @pFromDate, @pToDate, @pNotes, @pDayCount, @pCreatedBy, @pProjectID, @pIsCalledFromOtherSP, @pPrevilageType, @pError OUTPUT", sqlParameters, cancellationToken);

            pEmployeeVacationID.SetValue(parameterpEmployeeVacationID.Value);
            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SaveGroupsAsync(string pGroupName, int? pCreatedBy, int? pProjectID, OutputParameter<int?> pGroupID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpGroupID = new SqlParameter
            {
                ParameterName = "pGroupID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pGroupID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterpGroupID,
                new SqlParameter
                {
                    ParameterName = "pGroupName",
                    Size = 100,
                    Value = pGroupName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SaveGroups] @pGroupID OUTPUT, @pGroupName, @pCreatedBy, @pProjectID, @pError OUTPUT", sqlParameters, cancellationToken);

            pGroupID.SetValue(parameterpGroupID.Value);
            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SaveHolidayAsync(int? pHolidayTypeID, int? pFromDate, int? pToDate, string pNotes, int? pCreatedBy, int? pProjectID, OutputParameter<int?> pHolidayID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpHolidayID = new SqlParameter
            {
                ParameterName = "pHolidayID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pHolidayID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterpHolidayID,
                new SqlParameter
                {
                    ParameterName = "pHolidayTypeID",
                    Value = pHolidayTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFromDate",
                    Value = pFromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pToDate",
                    Value = pToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pNotes",
                    Size = 1000,
                    Value = pNotes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SaveHoliday] @pHolidayID OUTPUT, @pHolidayTypeID, @pFromDate, @pToDate, @pNotes, @pCreatedBy, @pProjectID, @pError OUTPUT", sqlParameters, cancellationToken);

            pHolidayID.SetValue(parameterpHolidayID.Value);
            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SaveIDsResult>> SaveIDsAsync(int? pProjectID, string pValidatePeriod, string pValidateID, string pValidateType, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                new SqlParameter
                {
                    ParameterName = "pValidatePeriod",
                    Size = 1000,
                    Value = pValidatePeriod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pValidateID",
                    Size = 1000,
                    Value = pValidateID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pValidateType",
                    Size = 1000,
                    Value = pValidateType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SaveIDsResult>("EXEC @returnValue = [dbo].[SaveIDs] @pProjectID, @pError OUTPUT, @pValidatePeriod, @pValidateID, @pValidateType", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SaveProjectFeaturesAsync(int? pCreatedBy, int? pProjectID, int? pIsChecked, int? pAllowedNumber, OutputParameter<int?> pFeatureID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpFeatureID = new SqlParameter
            {
                ParameterName = "pFeatureID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pFeatureID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterpFeatureID,
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pIsChecked",
                    Value = pIsChecked ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                new SqlParameter
                {
                    ParameterName = "pAllowedNumber",
                    Value = pAllowedNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SaveProjectFeatures] @pFeatureID OUTPUT, @pCreatedBy, @pProjectID, @pIsChecked, @pError OUTPUT, @pAllowedNumber", sqlParameters, cancellationToken);

            pFeatureID.SetValue(parameterpFeatureID.Value);
            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SaveReminderAsync(int? pPK, int? pEmployeeID, int? pTypeID, int? pEndDate, string pNotes, int? pCreatedBy, int? pProjectID, int? pFromFromApprovalProcessID, int? pToFromApprovalProcessID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pPK",
                    Value = pPK ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pTypeID",
                    Value = pTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEndDate",
                    Value = pEndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pNotes",
                    Size = 1000,
                    Value = pNotes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFromFromApprovalProcessID",
                    Value = pFromFromApprovalProcessID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pToFromApprovalProcessID",
                    Value = pToFromApprovalProcessID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SaveReminder] @pPK, @pEmployeeID, @pTypeID, @pEndDate, @pNotes, @pCreatedBy, @pProjectID, @pFromFromApprovalProcessID, @pToFromApprovalProcessID, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SaveShiftsAsync(string pShiftName, int? pAllowedLate, int? pCheckOutAfterMidNight, int? pMorningAttendanceasAdditional, int? pCalculateAdditionalIfExceed, int? pFixedDayID, int? pShiftDays, int? pCreatedBy, int? pProjectID, int? pOvertime, int? pStatusID, int? pEarlyLeave, int? pAllowedAdditionalBefore, int? pShouldCheckIn, int? pAllowedLatetooverride, int? pCheckoutShouldbeBefore, decimal? pAdditionalInWork, decimal? pAdditionalInHoliday, int? pIsActiveBreak, int? pBreakPeriod, int? pBreakTypeID, int? pIsBreakWillBeAddedToEndtime, int? pIsDynamicShift, int? pShiftDailyWorkInMinutes, int? pShiftNoOfDaysBerMonth, int? pShiftAllowedMonthlyVacation, int? pWorkingPeriod, int? pShouldCheckout, decimal? pStaticOvertime, decimal? pHourRate, int? pStartDate, int? pEndDate, int? pRamadanActivate, int? pRamadanStartDate, int? pRamadanEndDate, OutputParameter<int?> pShiftID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpShiftID = new SqlParameter
            {
                ParameterName = "pShiftID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pShiftID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterpShiftID,
                new SqlParameter
                {
                    ParameterName = "pShiftName",
                    Size = 100,
                    Value = pShiftName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pAllowedLate",
                    Value = pAllowedLate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCheckOutAfterMidNight",
                    Value = pCheckOutAfterMidNight ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pMorningAttendanceasAdditional",
                    Value = pMorningAttendanceasAdditional ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCalculateAdditionalIfExceed",
                    Value = pCalculateAdditionalIfExceed ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFixedDayID",
                    Value = pFixedDayID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pShiftDays",
                    Value = pShiftDays ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                new SqlParameter
                {
                    ParameterName = "pOvertime",
                    Value = pOvertime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pStatusID",
                    Value = pStatusID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEarlyLeave",
                    Value = pEarlyLeave ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pAllowedAdditionalBefore",
                    Value = pAllowedAdditionalBefore ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pShouldCheckIn",
                    Value = pShouldCheckIn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pAllowedLatetooverride",
                    Value = pAllowedLatetooverride ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCheckoutShouldbeBefore",
                    Value = pCheckoutShouldbeBefore ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pAdditionalInWork",
                    Precision = 18,
                    Scale = 3,
                    Value = pAdditionalInWork ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "pAdditionalInHoliday",
                    Precision = 18,
                    Scale = 3,
                    Value = pAdditionalInHoliday ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "pIsActiveBreak",
                    Value = pIsActiveBreak ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pBreakPeriod",
                    Value = pBreakPeriod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pBreakTypeID",
                    Value = pBreakTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pIsBreakWillBeAddedToEndtime",
                    Value = pIsBreakWillBeAddedToEndtime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pIsDynamicShift",
                    Value = pIsDynamicShift ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pShiftDailyWorkInMinutes",
                    Value = pShiftDailyWorkInMinutes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pShiftNoOfDaysBerMonth",
                    Value = pShiftNoOfDaysBerMonth ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pShiftAllowedMonthlyVacation",
                    Value = pShiftAllowedMonthlyVacation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pWorkingPeriod",
                    Value = pWorkingPeriod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pShouldCheckout",
                    Value = pShouldCheckout ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pStaticOvertime",
                    Precision = 18,
                    Scale = 3,
                    Value = pStaticOvertime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "pHourRate",
                    Precision = 18,
                    Scale = 3,
                    Value = pHourRate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "pStartDate",
                    Value = pStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEndDate",
                    Value = pEndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pRamadanActivate",
                    Value = pRamadanActivate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pRamadanStartDate",
                    Value = pRamadanStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pRamadanEndDate",
                    Value = pRamadanEndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SaveShifts] @pShiftID OUTPUT, @pShiftName, @pAllowedLate, @pCheckOutAfterMidNight, @pMorningAttendanceasAdditional, @pCalculateAdditionalIfExceed, @pFixedDayID, @pShiftDays, @pCreatedBy, @pProjectID, @pError OUTPUT, @pOvertime, @pStatusID, @pEarlyLeave, @pAllowedAdditionalBefore, @pShouldCheckIn, @pAllowedLatetooverride, @pCheckoutShouldbeBefore, @pAdditionalInWork, @pAdditionalInHoliday, @pIsActiveBreak, @pBreakPeriod, @pBreakTypeID, @pIsBreakWillBeAddedToEndtime, @pIsDynamicShift, @pShiftDailyWorkInMinutes, @pShiftNoOfDaysBerMonth, @pShiftAllowedMonthlyVacation, @pWorkingPeriod, @pShouldCheckout, @pStaticOvertime, @pHourRate, @pStartDate, @pEndDate, @pRamadanActivate, @pRamadanStartDate, @pRamadanEndDate", sqlParameters, cancellationToken);

            pShiftID.SetValue(parameterpShiftID.Value);
            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TarheelEmployeeBalanceResult>> TarheelEmployeeBalanceAsync(int? pYearID, int? pProjectID, int? pCreatedBy, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pYearID",
                    Value = pYearID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TarheelEmployeeBalanceResult>("EXEC @returnValue = [dbo].[TarheelEmployeeBalance] @pYearID, @pProjectID, @pCreatedBy, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> UpdateAllowance_deductionAsync(int? pAllowanceID, string pDefaultDesc, int? pTypeID, decimal? pAmount, int? pCalculateTypeID, int? pNatureID, int? pIsDefault, int? pModifiedBy, int? pProjectID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pAllowanceID",
                    Value = pAllowanceID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pDefaultDesc",
                    Size = 100,
                    Value = pDefaultDesc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pTypeID",
                    Value = pTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pAmount",
                    Precision = 18,
                    Scale = 5,
                    Value = pAmount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "pCalculateTypeID",
                    Value = pCalculateTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pNatureID",
                    Value = pNatureID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pIsDefault",
                    Value = pIsDefault ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pModifiedBy",
                    Value = pModifiedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[UpdateAllowance_deduction] @pAllowanceID, @pDefaultDesc, @pTypeID, @pAmount, @pCalculateTypeID, @pNatureID, @pIsDefault, @pModifiedBy, @pProjectID, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> UpdateAttendanceAsync(int? pID, DateTime? pAttDate, string pType, int? pEmployeeID, int? pStatusID, int? pattdateint, int? pProjectID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pID",
                    Value = pID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pAttDate",
                    Value = pAttDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "pType",
                    Size = 50,
                    Value = pType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pStatusID",
                    Value = pStatusID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pattdateint",
                    Value = pattdateint ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[UpdateAttendance] @pID, @pAttDate, @pType, @pEmployeeID, @pStatusID, @pattdateint, @pProjectID, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<UpdateEmployeeAttendanceResult>> UpdateEmployeeAttendanceAsync(int? pEmployeeID, int? pAttendanceDate, int? pCheckIn, int? pCheckOut, int? pWeekDayID, int? pCreatedBy, int? pBreakIn, int? pBreakOut, int? pProjectID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pAttendanceDate",
                    Value = pAttendanceDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCheckIn",
                    Value = pCheckIn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCheckOut",
                    Value = pCheckOut ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pWeekDayID",
                    Value = pWeekDayID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pBreakIn",
                    Value = pBreakIn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pBreakOut",
                    Value = pBreakOut ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<UpdateEmployeeAttendanceResult>("EXEC @returnValue = [dbo].[UpdateEmployeeAttendance] @pEmployeeID, @pAttendanceDate, @pCheckIn, @pCheckOut, @pWeekDayID, @pCreatedBy, @pBreakIn, @pBreakOut, @pProjectID, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<UpdateEmployeeAttendance2Result>> UpdateEmployeeAttendance2Async(int? pID, int? pAttendanceDate, int? pEmployeeID, int? pProjectID, int? pTypeID, int? pCreatedBy, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pID",
                    Value = pID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pAttendanceDate",
                    Value = pAttendanceDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                new SqlParameter
                {
                    ParameterName = "pTypeID",
                    Value = pTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<UpdateEmployeeAttendance2Result>("EXEC @returnValue = [dbo].[UpdateEmployeeAttendance2] @pID, @pAttendanceDate, @pEmployeeID, @pProjectID, @pError OUTPUT, @pTypeID, @pCreatedBy", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> UpdateEmployeeHRServiceAsync(int? pEmployeeHRServiceID, int? pEmployeeID, int? pStatusID, int? pCreatedBy, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeHRServiceID",
                    Value = pEmployeeHRServiceID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pStatusID",
                    Value = pStatusID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[UpdateEmployeeHRService] @pEmployeeHRServiceID, @pEmployeeID, @pStatusID, @pCreatedBy, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> UpdateEmployeeInjuryAsync(int? pEmployeeInjuryID, int? pEmployeeID, int? pStatusID, int? pCreatedBy, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeeInjuryID",
                    Value = pEmployeeInjuryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pStatusID",
                    Value = pStatusID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[UpdateEmployeeInjury] @pEmployeeInjuryID, @pEmployeeID, @pStatusID, @pCreatedBy, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> UpdateEmployeePenaltyAsync(int? pEmployeePenaltyID, int? pEmployeeID, int? pStatusID, int? pCreatedBy, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pEmployeePenaltyID",
                    Value = pEmployeePenaltyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEmployeeID",
                    Value = pEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pStatusID",
                    Value = pStatusID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[UpdateEmployeePenalty] @pEmployeePenaltyID, @pEmployeeID, @pStatusID, @pCreatedBy, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> UpdatePasswordAsync(int? pUserID, string pUserPassword, string pOldPassword, int? pProjectID, int? pWithOldPassword, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pUserID",
                    Value = pUserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pUserPassword",
                    Size = 50,
                    Value = pUserPassword ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pOldPassword",
                    Size = 50,
                    Value = pOldPassword ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                new SqlParameter
                {
                    ParameterName = "pWithOldPassword",
                    Value = pWithOldPassword ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[UpdatePassword] @pUserID, @pUserPassword, @pOldPassword, @pProjectID, @pError OUTPUT, @pWithOldPassword", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> UpdateProjectsAsync(int? pProjectID, string pProjectName, string pCompanyName, int? pIsActive, string pReportPath, string pimagepath, string pfootertitle1, string pfootertitle2, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectName",
                    Size = 200,
                    Value = pProjectName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pCompanyName",
                    Size = 200,
                    Value = pCompanyName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pIsActive",
                    Value = pIsActive ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pReportPath",
                    Size = 1000,
                    Value = pReportPath ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pimagepath",
                    Size = 1000,
                    Value = pimagepath ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pfootertitle1",
                    Size = 1000,
                    Value = pfootertitle1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pfootertitle2",
                    Size = 1000,
                    Value = pfootertitle2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[UpdateProjects] @pProjectID, @pProjectName, @pCompanyName, @pIsActive, @pReportPath, @pimagepath, @pfootertitle1, @pfootertitle2, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> UpdateReminderAsync(int? pID, int? pCreatedBy, int? pProjectID, int? pPK, int? pTypeID, int? pUserID, int? pFlag, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pID",
                    Value = pID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pPK",
                    Value = pPK ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pTypeID",
                    Value = pTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pUserID",
                    Value = pUserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pFlag",
                    Value = pFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[UpdateReminder] @pID, @pCreatedBy, @pProjectID, @pPK, @pTypeID, @pUserID, @pFlag, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> UpdateSettingsAsync(int? pSettingID, decimal? pAdditionalInWork, decimal? pAdditionalInHoliday, int? pCalculateAdditionalIfExceed, decimal? pSocialSecurityAllowanceID, int? pCalLeavesFromSalary, int? pCalLateAsAdditional, int? pDailyWorkInMinutes, int? pStartTimeINMinutes, int? pEndTimeInMinutes, int? pAllowedLate, int? pNoOfDaysBerMonth, int? pWithMorningExtra, int? pCheckoutAfterMidNight, int? pAllowedLateInLeave, int? pActiveYear, int? pDependOnCheckType, int? pCreatedBy, DateTime? pCreationDate, int? pModifiedBy, DateTime? pModificationDate, int? pAdditionalAllowanceID, int? pPersonalVacationID, string pMonthID, int? pLastCalculationDate, int? pGlobalLocal, int? pTest, int? pWithBreak, int? pbreaktime, int? pProjectID, int? pLateDeductType, decimal? pLateDeductPercentage, decimal? pCompanySharePercent, int? pBreakFrom, int? pBreakTo, int? pEarlyLeaveDeductType, decimal? pEarlyLeaveDeductPercentage, string pFooterTitle1, string pProjectName, int? ptimeZone, int? pIsDynamicShift, decimal? pSocialSecurityAmount2, decimal? pCompanySharePercent2, int? pAllowedMonthlyLeaves, int? pMissingCheckoutValue, int? pLeaveWillDeductFromSalary, int? pAllowedMonthlyVacation, decimal? pVacationDeductPercentage, int? pExtraDaysWillBeAddedToSalry, int? pAllowMultiCheckIn, int? pViewSocialSecurity, decimal? pSocialSecurityAmount3, decimal? pCompanySharePercent3, decimal? pLoanPercentage, int? pMainBankID, string pHrManager, string pcheckin, string pcheckout, string pBreakin, string pBreakOut, int? pCompanyMayCLose, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pSettingID",
                    Value = pSettingID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pAdditionalInWork",
                    Precision = 18,
                    Scale = 5,
                    Value = pAdditionalInWork ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "pAdditionalInHoliday",
                    Precision = 18,
                    Scale = 5,
                    Value = pAdditionalInHoliday ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "pCalculateAdditionalIfExceed",
                    Value = pCalculateAdditionalIfExceed ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pSocialSecurityAllowanceID",
                    Precision = 18,
                    Scale = 5,
                    Value = pSocialSecurityAllowanceID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "pCalLeavesFromSalary",
                    Value = pCalLeavesFromSalary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCalLateAsAdditional",
                    Value = pCalLateAsAdditional ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pDailyWorkInMinutes",
                    Value = pDailyWorkInMinutes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pStartTimeINMinutes",
                    Value = pStartTimeINMinutes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEndTimeInMinutes",
                    Value = pEndTimeInMinutes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pAllowedLate",
                    Value = pAllowedLate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pNoOfDaysBerMonth",
                    Value = pNoOfDaysBerMonth ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pWithMorningExtra",
                    Value = pWithMorningExtra ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCheckoutAfterMidNight",
                    Value = pCheckoutAfterMidNight ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pAllowedLateInLeave",
                    Value = pAllowedLateInLeave ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pActiveYear",
                    Value = pActiveYear ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pDependOnCheckType",
                    Value = pDependOnCheckType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreatedBy",
                    Value = pCreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pCreationDate",
                    Value = pCreationDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "pModifiedBy",
                    Value = pModifiedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pModificationDate",
                    Value = pModificationDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "pAdditionalAllowanceID",
                    Value = pAdditionalAllowanceID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pPersonalVacationID",
                    Value = pPersonalVacationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pMonthID",
                    Size = 1000,
                    Value = pMonthID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pLastCalculationDate",
                    Value = pLastCalculationDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pGlobalLocal",
                    Value = pGlobalLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pTest",
                    Value = pTest ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pWithBreak",
                    Value = pWithBreak ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pbreaktime",
                    Value = pbreaktime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pLateDeductType",
                    Value = pLateDeductType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pLateDeductPercentage",
                    Precision = 18,
                    Scale = 3,
                    Value = pLateDeductPercentage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "pCompanySharePercent",
                    Precision = 18,
                    Scale = 3,
                    Value = pCompanySharePercent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "pBreakFrom",
                    Value = pBreakFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pBreakTo",
                    Value = pBreakTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEarlyLeaveDeductType",
                    Value = pEarlyLeaveDeductType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pEarlyLeaveDeductPercentage",
                    Precision = 18,
                    Scale = 3,
                    Value = pEarlyLeaveDeductPercentage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "pFooterTitle1",
                    Size = 1000,
                    Value = pFooterTitle1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterpError,
                new SqlParameter
                {
                    ParameterName = "pProjectName",
                    Size = 1000,
                    Value = pProjectName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ptimeZone",
                    Value = ptimeZone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pIsDynamicShift",
                    Value = pIsDynamicShift ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pSocialSecurityAmount2",
                    Precision = 18,
                    Scale = 3,
                    Value = pSocialSecurityAmount2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "pCompanySharePercent2",
                    Precision = 18,
                    Scale = 3,
                    Value = pCompanySharePercent2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "pAllowedMonthlyLeaves",
                    Value = pAllowedMonthlyLeaves ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pMissingCheckoutValue",
                    Value = pMissingCheckoutValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pLeaveWillDeductFromSalary",
                    Value = pLeaveWillDeductFromSalary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pAllowedMonthlyVacation",
                    Value = pAllowedMonthlyVacation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pVacationDeductPercentage",
                    Precision = 18,
                    Scale = 3,
                    Value = pVacationDeductPercentage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "pExtraDaysWillBeAddedToSalry",
                    Value = pExtraDaysWillBeAddedToSalry ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pAllowMultiCheckIn",
                    Value = pAllowMultiCheckIn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pViewSocialSecurity",
                    Value = pViewSocialSecurity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pSocialSecurityAmount3",
                    Precision = 18,
                    Scale = 3,
                    Value = pSocialSecurityAmount3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "pCompanySharePercent3",
                    Precision = 18,
                    Scale = 3,
                    Value = pCompanySharePercent3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "pLoanPercentage",
                    Precision = 18,
                    Scale = 3,
                    Value = pLoanPercentage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "pMainBankID",
                    Value = pMainBankID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pHrManager",
                    Size = 100,
                    Value = pHrManager ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pcheckin",
                    Size = 100,
                    Value = pcheckin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pcheckout",
                    Size = 100,
                    Value = pcheckout ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pBreakin",
                    Size = 100,
                    Value = pBreakin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pBreakOut",
                    Size = 100,
                    Value = pBreakOut ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pCompanyMayCLose",
                    Value = pCompanyMayCLose ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[UpdateSettings] @pSettingID, @pAdditionalInWork, @pAdditionalInHoliday, @pCalculateAdditionalIfExceed, @pSocialSecurityAllowanceID, @pCalLeavesFromSalary, @pCalLateAsAdditional, @pDailyWorkInMinutes, @pStartTimeINMinutes, @pEndTimeInMinutes, @pAllowedLate, @pNoOfDaysBerMonth, @pWithMorningExtra, @pCheckoutAfterMidNight, @pAllowedLateInLeave, @pActiveYear, @pDependOnCheckType, @pCreatedBy, @pCreationDate, @pModifiedBy, @pModificationDate, @pAdditionalAllowanceID, @pPersonalVacationID, @pMonthID, @pLastCalculationDate, @pGlobalLocal, @pTest, @pWithBreak, @pbreaktime, @pProjectID, @pLateDeductType, @pLateDeductPercentage, @pCompanySharePercent, @pBreakFrom, @pBreakTo, @pEarlyLeaveDeductType, @pEarlyLeaveDeductPercentage, @pFooterTitle1, @pError OUTPUT, @pProjectName, @ptimeZone, @pIsDynamicShift, @pSocialSecurityAmount2, @pCompanySharePercent2, @pAllowedMonthlyLeaves, @pMissingCheckoutValue, @pLeaveWillDeductFromSalary, @pAllowedMonthlyVacation, @pVacationDeductPercentage, @pExtraDaysWillBeAddedToSalry, @pAllowMultiCheckIn, @pViewSocialSecurity, @pSocialSecurityAmount3, @pCompanySharePercent3, @pLoanPercentage, @pMainBankID, @pHrManager, @pcheckin, @pcheckout, @pBreakin, @pBreakOut, @pCompanyMayCLose", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> UpdateTemplateAsync(string pTableName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pTableName",
                    Size = 250,
                    Value = pTableName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[UpdateTemplate] @pTableName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> UpdateUsersAsync(int? pUserID, string pUserName, string pUserPassword, int? pProjectID, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pUserID",
                    Value = pUserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pUserName",
                    Size = 50,
                    Value = pUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pUserPassword",
                    Size = 50,
                    Value = pUserPassword ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pProjectID",
                    Value = pProjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterpError,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[UpdateUsers] @pUserID, @pUserName, @pUserPassword, @pProjectID, @pError OUTPUT", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ValidateUserAsync(string pUserName, DateTime? pValidateFrom, DateTime? pValidateTo, OutputParameter<int?> pError, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpError = new SqlParameter
            {
                ParameterName = "pError",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = pError?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pUserName",
                    Size = 50,
                    Value = pUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pValidateFrom",
                    Value = pValidateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterpError,
                new SqlParameter
                {
                    ParameterName = "pValidateTo",
                    Value = pValidateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ValidateUser] @pUserName, @pValidateFrom, @pError OUTPUT, @pValidateTo", sqlParameters, cancellationToken);

            pError.SetValue(parameterpError.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
